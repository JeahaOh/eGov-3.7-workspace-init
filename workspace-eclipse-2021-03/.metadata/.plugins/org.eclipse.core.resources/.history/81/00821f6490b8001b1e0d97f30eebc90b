package kr.co.hanshinit.NeoCMS.cmm.interceptor;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerMapping;
import org.springframework.web.servlet.ModelAndView;

import kr.co.hanshinit.NeoCMS.cmm.service.CmmUseService;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.AccesType;
import kr.co.hanshinit.NeoCMS.cmm.util.StringUtil;
import kr.co.hanshinit.NeoCMS.sym.prm.aut.service.ProgrmAuthorService;
import kr.co.hanshinit.NeoCMS.sym.sit.smm.service.SiteMngrService;
import kr.co.hanshinit.NeoCMS.uat.uia.service.LoginUtil;
import kr.co.hanshinit.NeoCop.cop.cmm.util.StaffLoginUtil;

/**
 * 프로그램권한을 바인딩 하기위한 인터셉터 ProgrmAuthorBindingInterceptor.java
 * @author (주)한신정보기술 개발3팀 황윤태
 * @since 2014. 6. 19.
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일           수정자     수정내용
 *  ------------- -------- ---------------------------
 *  2014. 6. 19.    황윤태     최초 생성
 *
 * </pre>
 */

@Component("progrmAuthorBinding")
public class ProgrmAuthorBindingInterceptor extends ControllerInterceptorAdapter {

	/** progrmAuthorService */
	@Resource(name="progrmAuthorService")
	private ProgrmAuthorService progrmAuthorService;

	@Resource(name="siteMngrService")
	private SiteMngrService siteMngrService;

	@Resource(name="cmmUseService")
	private CmmUseService cmmUseService;

	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
		// 인터셉터 정보를 가져온다
		ControllerInterceptor interceptor = getInterceptor(handler);

		Map<?, ?> pathVariables = (Map<?, ?>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
		String siteId = (String)pathVariables.get("siteId");
		String sKey = StringUtil.nvl(request.getParameter("key"));

		if("staff".equals(siteId)) {
			if( !StaffLoginUtil.isLogined(request.getSession()) ) {
				response.sendRedirect("/staff/wlrdnsgha19.do?key=1028&mode=LOGIN&rurl=/staff/azalea.do");
				return false;
			}

			if( StringUtil.isEmpty(StaffLoginUtil.getLoginId(request.getSession())) ) {
				response.sendRedirect("/staff/azalea.do");
				return false;
			}

			if(!"A".equals(StaffLoginUtil.getLoginUserSe(request.getSession())) && !"ADMIN".equals(StaffLoginUtil.getLoginUserSe(request.getSession()))){
				// 메뉴 CRUD 체크
				if(!AuthCheck(sKey, interceptor.getCode(), request.getSession())){
					if(interceptor.getType() == AccesType.REJECT){
						request.setAttribute("msg", "권한이 없습니다.");
						response.sendRedirect("/common/authStaffMsgBack.do");
					}
					return false;
				}
			}
		}

		/*
		if( !LoginUtil.isLogined(request.getSession()) ) {
			response.sendRedirect("/common/neoAuthMsg.do");
			return false;
		}
		*/
/*
		Map<?, ?> pathVariables = (Map<?, ?>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
		String siteId = (String)pathVariables.get("siteId");
		String returnUrl ="";
		//권한없을 경우 returnUrl
		if(siteId == null){
			returnUrl ="/common/neoAuthMsgBack.do";
		}else{
			String sKey = StringUtil.nvl(request.getParameter("key"));
			if(!"".equals(sKey)){
				Integer key = Integer.parseInt(sKey);
				returnUrl ="/"+siteId+"/autReject.do?key="+key;
			}else{
				returnUrl ="/"+siteId+"/autReject.do";
			}

		}

		User user = SSOUtil.getCurrentUser(request.getSession());

		request.setAttribute("user", user);

		// 접근타입이 거부인경우 autReject.do 페이지로 redirect
		if(getType() == AccesType.REJECT){


			if(user==null){
				response.sendRedirect(returnUrl);
				return false;
			}

			//일반유저인경우는 returnUrl로 리턴.
			if(SSOUtil.hasRole("ROLE_GUEST",request.getSession())){
				response.sendRedirect(returnUrl);
				return false;
			}

			//최고관리자는 접근
			if(SSOUtil.adminAt(request.getSession())){
				return true;
			}

			//code가 있으면, 프로그램 권한 조회. 없으면 사이트관리자 권한 조회.
			if(!"DEFAULT".equals(getCode())){
				ProgrmAuthor searchVO = new ProgrmAuthor();
				searchVO.setUserId(user.getUserId());
				searchVO.setProgrmAuthorCode(getCode());
				ProgrmAuthor progrmAuthor = progrmAuthorService.selectProgrmAuthor(searchVO);
				//프로그램 관리자인지 확인.
				if(progrmAuthor==null){
					response.sendRedirect(returnUrl);
					return false;
				}
			}else{
				List<SiteMngrVO> siteMngrSiteInfoList = siteMngrService.selectSiteMngrListByUserId(user.getUserId());
				if( 0 == siteMngrSiteInfoList.size() ) {
					//사이트관리자가 아닌 경우 returnUrl로 리턴.
					response.sendRedirect(returnUrl);
					return false;
				}else{
					//사이트관리자인경우 접근
					//화면에서 해당 사이트만 출력.
					request.setAttribute("siteMngrSiteInfoList", siteMngrSiteInfoList);
				}
			}


			return true;


		}
		//SITE인 경우.권한 체크한후  autReject.do 페이지로 redirect
		else if(getType() == AccesType.SITE){
			if(user==null){
				response.sendRedirect(returnUrl);
				return false;
			}

			//일반유저인경우는 returnUrl로 리턴.
			if(SSOUtil.hasRole("ROLE_GUEST",request.getSession())){
				response.sendRedirect(returnUrl);
				return false;
			}

			//권한코드가 없는 경우.(전직원 허용)
			if("DEFAULT".equals(getCode())){
				if(!StringUtil.isEmpty(user.getUserId())){
					return true;
				}
			}

			//최고관리자는 접근
			if(SSOUtil.adminAt(request.getSession())){
				return true;
			}

			//사이트관리자인지 확인.
			int siteMngrCnt = siteMngrService.selectSiteMngrCnt(siteId, user.getUserId());
			if( 0 != siteMngrCnt ) {
				return true;
			}

			ProgrmAuthor searchVO = new ProgrmAuthor();
			searchVO.setUserId(user.getUserId());
			searchVO.setProgrmAuthorCode(getCode());
			ProgrmAuthor progrmAuthor = progrmAuthorService.selectProgrmAuthor(searchVO);

			//프로그램 관리자인지 확인.
			if(progrmAuthor!=null){
				return true;
			}else{
				return false;
			}

		}
		// 접근타입이 통과인경우 VIEW 권한을 준다. 화면단에서 VIEW권한으로 처리함.
		else if(getType() == AccesType.PASS){

			if(user == null){
				return true;
			}

			//일반유저는 PASS
			if(SSOUtil.hasRole("ROLE_GUEST",request.getSession())){
				return true;
			}

			//권한코드가 없는 경우.(전직원 허용)
			if("DEFAULT".equals(getCode())){
				if(!StringUtil.isEmpty(user.getUserId())){
					request.setAttribute("pgmAuthor", "Y");
					return true;
				}
			}

			//최고관리자는 VIEW 권한 준다.
			if(SSOUtil.adminAt(request.getSession())){
				request.setAttribute("pgmAuthor", "Y");
				return true;
			}

			//사이트관리자인지 확인.
			int siteMngrCnt = siteMngrService.selectSiteMngrCnt(siteId, user.getUserId());
			if( 0 != siteMngrCnt ) {
				request.setAttribute("pgmAuthor", "Y");
				return true;
			}

			ProgrmAuthor searchVO = new ProgrmAuthor();
			searchVO.setUserId(user.getUserId());
			searchVO.setProgrmAuthorCode(getCode());
			ProgrmAuthor progrmAuthor = progrmAuthorService.selectProgrmAuthor(searchVO);

			//프로그램 관리자인지 확인.
			if(progrmAuthor!=null){
				request.setAttribute("pgmAuthor", "Y");
			}

		}

*/


	   return true;


	}

	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView mav) throws Exception {

		// preHandle에서 등록한 model을 mav에 등록해준다.
		//	mav.getModelMap().addAllAttributes((ModelMap)request.getAttribute("mav"));

	}

	/**
	 * 메뉴 CRUD 체크
	 * @param menuId
	 * @param request
	 * @return
	 * @throws Exception
	 */
	private Boolean AuthCheck(String menuId, String code, HttpSession session) throws Exception{
		boolean rtnBoolean = false;

		HashMap<String, String> authMap = new HashMap<String, String>();
		authMap = StaffLoginUtil.getStaffMenuMap(session);

		String menuCrud = "";
		if(authMap != null){
			if(authMap.containsKey(menuId)){
				menuCrud = authMap.get(menuId);

				String inqireAuthor 	= StringUtil.strSubString(menuCrud,0, 1);			// 조회권한
				String registAuthor 	= StringUtil.strSubString(menuCrud,1, 2);			// 등록권한
				String updtAuthor 		= StringUtil.strSubString(menuCrud,2, 3);			// 수정권한
				String deleteAuthor 	= StringUtil.strSubString(menuCrud,3, 4);			// 삭제권한
				String detailAuthor 	= StringUtil.strSubString(menuCrud,4, 5);			// 상세조회권한
				String excelAuthor 	= StringUtil.strSubString(menuCrud,5, 6);			// 엑셀다운로드 권한

				if("LIST".equals(code)){
					// 리스트 조회 권한
					if("Y".equals(inqireAuthor)){
						return true;
					}else{
						return false;
					}
				}else if("ADD".equals(code)){
					// 입력 권한
					if("Y".equals(registAuthor)){
						return true;
					}else{
						return false;
					}
				}else if("UPDATE".equals(code)){
					// 수정권한
					if("Y".equals(updtAuthor)){
						return true;
					}else{
						return false;
					}
				}else if("DELETE".equals(code)){
					// 삭제 권한
					if("Y".equals(deleteAuthor)){
						return true;
					}else{
						return false;
					}
				}else if("VIEW".equals(code)){
					// 상세조회  권한
					if("Y".equals(detailAuthor)){
						return true;
					}else{
						return false;
					}
				}else if("EXCEL".equals(code)){
					// 상세조회  권한
					if("Y".equals(excelAuthor)){
						return true;
					}else{
						return false;
					}
				}

				rtnBoolean = false;
			}else{
				return false;
			}


		}else{
			rtnBoolean = false;
		}

		return rtnBoolean;
	}




}
