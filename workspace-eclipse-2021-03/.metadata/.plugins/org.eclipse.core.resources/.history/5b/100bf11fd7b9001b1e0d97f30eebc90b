package kr.co.hanshinit.NeoCMS.cop.bbs.ntt.web;

import java.net.URLEncoder;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import kr.co.hanshinit.NeoCMS.cmm.MobileUADetector;
import kr.co.hanshinit.NeoCMS.cmm.service.CmmUseService;
import kr.co.hanshinit.NeoCMS.cmm.service.FileMngUtil;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.AccesType;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.BbsMode;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.Interceptor;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.Mode;
import kr.co.hanshinit.NeoCMS.cmm.util.DasAgentUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.StringUtil;
import kr.co.hanshinit.NeoCMS.cop.bbs.bfm.service.BbsField;
import kr.co.hanshinit.NeoCMS.cop.bbs.bfm.service.BbsFieldService;
import kr.co.hanshinit.NeoCMS.cop.bbs.bim.service.BbsInfo;
import kr.co.hanshinit.NeoCMS.cop.bbs.bim.service.BbsInfoService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAnswerAtchmnfl;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAnswerAtchmnflService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAtchmnflService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAtchmnflVO;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAuthor;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAuthorService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNtt;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttAnswer;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttAnswerService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttComment;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttCommentService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttMinwonExcelView;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttVO;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.Bbs;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.BbsService;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.BbsVO;
import kr.co.hanshinit.NeoCMS.sym.cma.cdc.service.CmmnDetailCode;
import kr.co.hanshinit.NeoCMS.sym.cma.cdc.service.CmmnDetailCodeService;
import kr.co.hanshinit.NeoCMS.sym.dep.service.DepartmentService;
import kr.co.hanshinit.NeoCMS.tag.pagination.NeoPaginationInfo;
import kr.co.hanshinit.NeoCMS.uat.uia.service.LoginUtil;
import kr.co.hanshinit.NeoCMS.uss.umt.service.UserInfo;
import kr.co.hanshinit.NeoCMS.uss.umt.service.UserInfoService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;

/**
 * 게시물을 관리하기 위한 비즈니스 구현 클래스
 * @author (주)한신정보기술 연구개발팀 최관형
 * @since 2014.06.03
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일           수정자     수정내용
 *  ------------- -------- ---------------------------
 *  2014.06.03 최관형     최초 생성
 *  2014.07.03 최관형     통합 게시판을 미니보드 형태로 조회 추가
 *  2015.04.21 최관형     siteId가 빠진 URL로 변경
 *  2015.07.06 최관형     다시 siteId 추가
 *  2016.09.05 최관형     부서목록 추가
 *
 * </pre>
 */
@Controller
public class BbsNttController {

	protected Logger log = LoggerFactory.getLogger(this.getClass());

	/** bbsNttService */
	@Resource(name="bbsNttService")
	private BbsNttService bbsNttService;

	/** bbsNttAnswerService */
	@Resource(name="bbsNttAnswerService")
	private BbsNttAnswerService bbsNttAnswerService;

	/** bbsAtchmnflService */
	@Resource(name="bbsAtchmnflService")
	private BbsAtchmnflService bbsAtchmnflService;

	/** bbsInfoService */
	@Resource(name="bbsInfoService")
	private BbsInfoService bbsInfoService;

	/** bbsFieldService */
	@Resource(name="bbsFieldService")
	private BbsFieldService bbsFieldService;

	/** bbsService */
	@Resource(name="bbsService")
	private BbsService bbsService;

	/** bbsNttCommentService */
	@Resource(name="bbsNttCommentService")
	private BbsNttCommentService bbsNttCommentService;

	/** cmmUseService */
	@Resource(name="cmmUseService")
	private CmmUseService cmmUseService;

	/** FileMngUtil */
	@Resource(name="FileMngUtil")
	private FileMngUtil fileMngUtil;

	/** bbsAuthorService */
	@Resource(name="bbsAuthorService")
	private BbsAuthorService bbsAuthorService;

	@Resource(name="departmentService")
	private DepartmentService departmentService;

	@Resource(name="cmmnDetailCodeService")
	private CmmnDetailCodeService cmmnDetailCodeService;

	/** bbsAnswerAtchmnflService */
	@Resource(name="bbsAnswerAtchmnflService")
	private BbsAnswerAtchmnflService bbsAnswerAtchmnflService;

	@Resource(name="userInfoService")
	private UserInfoService userInfoService;

	/**
	 * 게시물의 목록을 조회한다.
	 * @param bbsNttVO
	 * @param bbsNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNo + "/list.jsp"
	 * @throws Exception
	 */
	@Interceptor(value={"bbsAuthorBinding","templateBinding"}, mode=Mode.BBS_LIST, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/selectBbsNttList.do")
    public String selectBbsNttList(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		if( 0 == bbsNo ) {
			return "NeoCMS/cop/bbs/emptyBbs";
		}

		 if("circle".equals(siteId)) {
			bbsNttVO.setClubId((String)request.getParameter("id"));
		}

		// 게시판 번호
		model.addAttribute("bbsNo", bbsNo);

		// 게시판 상세 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

		if( "RTSY04".equals(bbsInfo.getReplySe()) ) {

			Map<String, String> answerSttusMap = cmmUseService.selectCmmnDetailCodeMap("CVPLST");
			model.addAttribute("answerSttusMap", answerSttusMap);

			List<CmmnDetailCode> answerSttusList = cmmnDetailCodeService.selectCmmnDetailCodeLIstByCodeId("CVPLST");
			model.addAttribute("answerSttusList", answerSttusList);

			if(!StringUtil.isEmpty(bbsNttVO.getCvplDeptCode())) {
				List<String> deptCodeList = departmentService.selectDepartmentUpptAndLwprtCodeList(bbsNttVO.getCvplDeptCode());
				bbsNttVO.setCvplDeptCodes(deptCodeList);
			}
		}

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
//		} else {
//			bbsNttVO.setIntegrDeptCode(null);
		}
		// 통합 사용 이지만 개별 사용페이지인 경우
		bbsNttVO.setIndvdlzShowAt(bbsNttService.isIndvdlzShowAt(bbsInfo, bbsNttVO));


		boolean bbsAuthor = false;
		boolean isBbsAuthor = bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo());
		boolean isBbsDeptAuthor = bbsAuthorService.authorBbsMngrDept(request.getSession(), bbsNttVO.getBbsNo(), siteId);

		
		String loginKey = "";
		
		if("bwyf".equals(siteId)){
			loginKey = "2821";
		}else if("woman".equals(siteId)){
			loginKey = "2827";
		}else if("bwycenter".equals(siteId)){
			loginKey = "2832";
		}else if("bucheonyouth".equals(siteId)){
			loginKey = "2837";
		}else if("echoyouth".equals(siteId)){
			loginKey = "2842";
		}else if("sosayouth".equals(siteId)){
			loginKey = "2847";
		}else if("reserve".equals(siteId)){
			loginKey = "2852";
		}
		
		// 내글 만 표시인 경우
		if( "LSSE03".equals(bbsInfo.getListShowSe()) ) {
			// 로그인이 되어있지 않다면
			if( StringUtil.isEmpty(LoginUtil.getDplctCode(request.getSession())) ) {
				return cmmUseService.redirectMsg(model, "로그인 후 접근 가능 합니다.", "/"+siteId+"/login.do?key="+loginKey+"&rurl=" + URLEncoder.encode("/"+siteId+"/sub.do?key="+StringUtil.nvl((String)request.getParameter("key")),"UTF-8"));
			}

			if( isBbsAuthor || isBbsDeptAuthor ) bbsAuthor = true;
			if( !LoginUtil.isAdmin(request.getSession()) && !bbsAuthor) {
				// 내 중복 코드
		        bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
			}

		}

		if(!StringUtil.isEmpty(bbsNttVO.getFrstRegisterPnttmSdt()))
			bbsNttVO.setFrstRegisterPnttmSdt(bbsNttVO.getFrstRegisterPnttmSdt().replaceAll("-", ""));

		if(!StringUtil.isEmpty(bbsNttVO.getFrstRegisterPnttmEdt())) {
			bbsNttVO.setFrstRegisterPnttmEdt(bbsNttVO.getFrstRegisterPnttmEdt().replaceAll("-", ""));
		}

		// 게시물 표시기간 적용
		String nttShowPdValue = "";
		if( !"0".equals(StringUtil.nvl(bbsInfo.getNttShowPd())) ) {
			nttShowPdValue = bbsInfo.getNttShowPd();
		}
		bbsNttVO.setNttShowPdValue(nttShowPdValue);

		if(bbsNo == 2172 || bbsNo == 684) {
			if( isBbsAuthor || isBbsDeptAuthor ) bbsAuthor = true;
			if( !bbsAuthor ) {
				bbsNttVO.setNttShowValue("Y");
			}
		}

		// 게시물 페이징
		bbsNttVO.setPageUnit(bbsInfo.getListCo());
		bbsNttVO.setPageSize(bbsInfo.getPageCo());


		// 게시물 카운트
		int totCnt = bbsNttService.selectBbsNttTotCnt(bbsNttVO);
		// 페이징 정보
    	NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    	// 페이징 정보 등록
        model.addAttribute("paginationInfo", neoPaginationInfo);

		List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, bbsNttVO);
        model.addAttribute("bbsNttList", bbsNttList);

		// 게시판 정보
		BbsVO bbsVO = bbsService.selectBbs(bbsNo);

		// 동영상 게시판이면
		if( "movie".equals(bbsVO.getSkinId()) ) {
			// 게시물 번호
			int nttNo = 0;
			String strNttNo = StringUtil.nvl((String)request.getParameter("nttNo"));
			// 게시물 번호가 없다면 첫번째 게시물을 조회한다.
			if( StringUtil.isEmpty(strNttNo) ) {
				if( 0 != bbsNttList.size() ) {
					nttNo = bbsNttList.get(0).getNttNo();
				}
			} else {
				nttNo = Integer.parseInt(strNttNo);
			}
			// 게시물 번호가 있다면 해당 게시물 번호로 게시물을 조회한다.
			if( 0 != nttNo ) {
				// 게시물 정보
				BbsNtt bbsNtt = bbsNttService.selectBbsNtt(nttNo);
				model.addAttribute("bbsNtt", bbsNtt);
				// HTML 사용에 따라 내용을 TEXT로 변환
				if( "N".equals(bbsNtt.getHtmlUseAt()) ) {
					String nttCn = bbsNtt.getNttCn();
					bbsNtt.setNttCn(StringUtil.html2text(nttCn));
					if(nttCn != null && !"".equals(nttCn)) {
						bbsNtt.setNttCn(StringUtil.replaceUrls(bbsNtt.getNttCn()));
					}
				}
				// 첨부파일 목록
				List<BbsAtchmnflVO> bbsAtchmnflList = bbsAtchmnflService.selectBbsAtchmnflList(request, nttNo, true);
				model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
			}
		}

		// 공지사항
		if( "Y".equals(bbsInfo.getNoticeUseAt()) ) {
			List<BbsNttVO> bbsNttNoticeList = bbsNttService.selectBbsNttNoticeList(bbsInfo, bbsNttVO);
			model.addAttribute("bbsNttNoticeList", bbsNttNoticeList);
		}

		if(totCnt > 0 && LoginUtil.isAdmin(request.getSession()) ||
				bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo()) ||
				bbsAuthorService.authorBbsMngrDept(request.getSession(), bbsNttVO.getBbsNo(), siteId)) {
			BbsVO abbsVO = new BbsVO();
			abbsVO.setSiteId(siteId);
			int aTotCnt = bbsService.selectBbsTotCnt(bbsVO);
			abbsVO.setFirstIndex(0);
			abbsVO.setLastIndex(aTotCnt);
			List<BbsVO> bbsList = bbsService.selectBbsList(abbsVO);
			model.addAttribute("bbsMgrAuth", "Y");
			model.addAttribute("transBbsList", bbsList);
		}
		
		// 문자발송 게시판 목록
		BbsVO bbsSMSVO = new BbsVO();
		bbsSMSVO.setSiteId(siteId);
		bbsSMSVO.setSkinId("smsMng");
		bbsSMSVO.setLastIndex(9999);
		bbsSMSVO.setFirstIndex(0);
		List<BbsVO> bbsSMSList = bbsService.selectBbsList(bbsSMSVO);
		model.addAttribute("bbsSMSList", bbsSMSList);

		return "bbs/" + bbsNo + "/list.jsp";

    }

	@Interceptor(value={"bbsAuthorBinding","templateBinding"}, mode=Mode.BBS_LIST, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/bbsNttMinwonExcelDownload.do")
    public BbsNttMinwonExcelView bbsNttMinwonExcelDownload(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 번호
		model.addAttribute("bbsNo", bbsNo);

		// 게시판 상세 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

		if( "RTSY04".equals(bbsInfo.getReplySe()) ) {

			Map<String, String> answerSttusMap = cmmUseService.selectCmmnDetailCodeMap("CVPLST");
			model.addAttribute("answerSttusMap", answerSttusMap);

			List<CmmnDetailCode> answerSttusList = cmmnDetailCodeService.selectCmmnDetailCodeLIstByCodeId("CVPLST");
			model.addAttribute("answerSttusList", answerSttusList);

			if("lll".equals(siteId)) {
				bbsNttVO.setOthbcAt("Y");
				bbsNttVO.setOthbcDplctCode(LoginUtil.getDplctCode(request.getSession()));
			}

			if(!StringUtil.isEmpty(bbsNttVO.getCvplDeptCode())) {
				List<String> deptCodeList = departmentService.selectDepartmentUpptAndLwprtCodeList(bbsNttVO.getCvplDeptCode());
				bbsNttVO.setCvplDeptCodes(deptCodeList);
			}

		}

		// 통합 사용 이지만 개별 사용페이지인 경우
		bbsNttVO.setIndvdlzShowAt(bbsNttService.isIndvdlzShowAt(bbsInfo, bbsNttVO));

		// 내글 만 표시인 경우
		if( "LSSE03".equals(bbsInfo.getListShowSe()) ) {

			boolean bbsAuthor = false;
			boolean isBbsAuthor = bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo());
			boolean isBbsDeptAuthor = bbsAuthorService.authorBbsMngrDept(request.getSession(), bbsNttVO.getBbsNo(), siteId);

			if( isBbsAuthor || isBbsDeptAuthor ) bbsAuthor = true;
			if( !LoginUtil.isAdmin(request.getSession()) && !bbsAuthor) {
				// 내 중복 코드
		        bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
			}

		}

		if(!StringUtil.isEmpty(bbsNttVO.getFrstRegisterPnttmSdt()))
			bbsNttVO.setFrstRegisterPnttmSdt(bbsNttVO.getFrstRegisterPnttmSdt().replaceAll("-", ""));

		if(!StringUtil.isEmpty(bbsNttVO.getFrstRegisterPnttmEdt())) {
			bbsNttVO.setFrstRegisterPnttmEdt(bbsNttVO.getFrstRegisterPnttmEdt().replaceAll("-", ""));
		}

		// 게시물 표시기간 적용
		String nttShowPdValue = "";
		if( !"0".equals(StringUtil.nvl(bbsInfo.getNttShowPd())) ) {
			nttShowPdValue = bbsInfo.getNttShowPd();
		}
		bbsNttVO.setNttShowPdValue(nttShowPdValue);

		// 게시물 페이징
		bbsNttVO.setPageUnit(bbsInfo.getListCo());
		bbsNttVO.setPageSize(bbsInfo.getPageCo());


		int totCnt = bbsNttService.selectBbsNttTotCnt(bbsNttVO);
    	NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
        model.addAttribute("paginationInfo", neoPaginationInfo);
		List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, bbsNttVO);
        model.addAttribute("bbsNttList", bbsNttList);

		return new BbsNttMinwonExcelView();

    }

	/**
	 * 게시물 등록 화면으로 이동한다.
	 * @param bbsNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNo + "/regist.jsp"
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_ADD, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/addBbsNttView.do")
    public String addBbsNttView(@PathVariable("siteId") String siteId, @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @RequestParam("bbsNo") int bbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 번호
		model.addAttribute("bbsNo", bbsNo);

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNo);
		model.addAttribute("bbsInfo", bbsInfo);

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		// 신청기능 사용이면서 기간에 해당이 안되면 메시지 후 이전페이지로 넘김
		if( !bbsService.isRequestPeriod(bbsInfo) ) {
			return cmmUseService.backMsg(model, bbsInfo.getReqstPdMssage());
		}

		if( "RTSY04".equals(bbsInfo.getReplySe()) ) {

			String userId = LoginUtil.getLoginId(request.getSession());
			String dplctCode = LoginUtil.getDplctCode(request.getSession());
			String mbtlNum = LoginUtil.getMbtlnum(request.getSession());
			String result = "";

			// 휴대폰번호가 있을 시, 자동입력 처리
			if(!StringUtil.isEmpty(dplctCode) && !StringUtil.isEmpty(mbtlNum)) {
				result = StringUtil.replacePhoneNum(mbtlNum.replaceAll("-",""));
				bbsNttVO.setMoblphon(result);
			} else if(!StringUtil.isEmpty(userId)) {
				UserInfo ui = new UserInfo();
				ui.setUserId(userId);
				if(!"staff".equals(siteId)) {
					ui.setUserSe("GNRL");
				} else {
					ui.setUserSe("");
				}
				UserInfo userInfo = userInfoService.selectUserInfo(ui);
				if(userInfo != null) {
					if(!StringUtil.isEmpty(userInfo.getMobile())) {
						result = StringUtil.replacePhoneNum(userInfo.getMobile().replaceAll("-",""));
						bbsNttVO.setMoblphon(result);
					}
				}
			}
		}

		// 사용자 세션 처리
		bbsNttVO.setWriterNm(LoginUtil.getLoginNm(request.getSession()));
		bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
		model.addAttribute("bbsNttVO", bbsNttVO);

		// 부서 목록
		model.addAttribute("departmentList", departmentService.selectDepartmentListBySttusYes());

		return "bbs/" + bbsNo + "/regist.jsp";

    }

	/**
	 * 게시물 등록을 처리한다.
	 * @param multiRequest
	 * @param bbsNttVO
	 * @param key
	 * @param request
	 * @param model
	 * @return 등록화면 호출시 : "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp"
	 *               등록화면 처리시 : cmmUseService.redirectMsg(model, "등록을 완료하였습니다.", "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode())
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_ADD, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/addBbsNtt.do")
    public String addBbsNtt(final MultipartHttpServletRequest multiRequest,
    		@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		model.addAttribute("bbsInfo", bbsInfo);

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		// 신청기능 사용이면서 기간에 해당이 안되면 메시지 후 이전페이지로 넘김
		if( !bbsService.isRequestPeriod(bbsInfo) ) {
			return cmmUseService.backMsg(model, bbsInfo.getReqstPdMssage());
		}

		// 사용자 세션 처리

		if(!LoginUtil.isAdmin(request.getSession()) &&
			!bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo()) &&
			!bbsAuthorService.authorBbsMngrDept(request.getSession(), bbsNttVO.getBbsNo(), siteId)) {
			bbsNttVO.setWriterNm(LoginUtil.getLoginNm(request.getSession()));
		}
		bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));

		// 게시판번호
		model.addAttribute("bbsNo", bbsNttVO.getBbsNo());

		// 입력데이터
		model.addAttribute("bbsNtt", bbsNttVO);

		// 부서 목록
		model.addAttribute("departmentList", departmentService.selectDepartmentListBySttusYes());

		if("RTSY04".equals(bbsInfo.getReplySe())) {
	        String userAgent = request.getHeader("user-agent");
	        if(MobileUADetector.isMobile(userAgent))
	        	bbsNttVO.setAditfield9("M");
	        else
	        	bbsNttVO.setAditfield9("W");
		}

		// 유효성 검증
		String[] arrValidate = bbsNttService.validateBbsNtt(bbsNttVO);
		if( "1".equals(arrValidate[0]) ) {
			// validate
			model.addAttribute("isValidate", true);
			model.addAttribute("fieldNm", arrValidate[1]);
			model.addAttribute("message", arrValidate[2]);
			// 입력페이지 이동
			return "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp";
		}

		int nttNo = 0;

		// 등록 처리
		try {

			nttNo = bbsNttService.insertBbsNtt(multiRequest, request, bbsNttVO);
		} catch(Exception e) {
			// validate
			model.addAttribute("isValidate", true);
			model.addAttribute("fieldNm", "");
			model.addAttribute("message", e.getMessage());
			e.printStackTrace();
			// 입력페이지 이동
			return "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp";
		}

		// 원주시청 - 잊혀질권리
		if ("Y".equals(bbsInfo.getDasUseAt()) ) {
			StringBuffer delFileList = new StringBuffer("");
			Long fileSize = (long) 0;

			try {
				// 등록된 첨부파일 목록조회
				List<BbsAtchmnflVO> bbsAtchmnflViewList = bbsAtchmnflService.selectBbsAtchmnflList(request, nttNo, false);
				if (bbsAtchmnflViewList.size() != 0 ) {
					for (int LoopI = 0; LoopI < bbsAtchmnflViewList.size();LoopI++) {

						// 파일사이즈
						fileSize = fileSize + bbsAtchmnflViewList.get(LoopI).getFileSize();

						// 삭제될 파일 리스트
						if (StringUtil.isEmpty(delFileList.toString())) {
							delFileList.append(FileMngUtil.getRealPath(bbsAtchmnflViewList.get(LoopI).getStorePath() + "/" + bbsAtchmnflViewList.get(LoopI).getStoreFileNm()));
						} else {
							delFileList.append(", " + FileMngUtil.getRealPath(bbsAtchmnflViewList.get(LoopI).getStorePath() + "/" + bbsAtchmnflViewList.get(LoopI).getStoreFileNm()));
						}
					}
				}
				DasAgentUtil das = new DasAgentUtil();

				String dasDtDe = "Y".equals(bbsNttVO.getDasPrmanentAt()) ? "29991231235959000": bbsNttVO.getDasDtDe().replaceAll("-", "")+"235959000"; // 잊혀질권리 삭제일자
				das.AgentFileCreate(
						String.valueOf(bbsNttVO.getFrstRegisterPnttm()+"000")
						, String.valueOf(bbsNttVO.getWriterIp())
						, String.valueOf(siteId)
						, String.valueOf(bbsNttVO.getBbsNo())
						, String.valueOf(nttNo)
						, delFileList.toString()
						, "DELETE FROM NEOCMS.TN_BBS_NTT WHERE BBS_NO = "+bbsNttVO.getBbsNo()+" AND NTT_NO = "+bbsNttVO.getNttNo()+";DELETE FROM NEOCMS.TN_BBS_ATCHMNFL WHERE BBS_NO = "+bbsNttVO.getBbsNo()+" AND NTT_NO ="+bbsNttVO.getNttNo()
						, String.valueOf(fileSize)
						, String.valueOf(dasDtDe)
						);
			} catch(Exception ee) {
				ee.printStackTrace();
				System.out.println("Das input Error : "+ee.getMessage());
			}
		}

		return cmmUseService.redirectMsg(model, "등록을 완료하였습니다.", "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode());

    }

	/**
	 * 게시물의 상세정보를 조회한다.
	 * @param bbsNttVO
	 * @param bbsNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNttVO.getBbsNo() + "/view.jsp"
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_VIEW, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/selectBbsNttView.do")
    public String selectBbsNttView(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		model.addAttribute("bbsInfo", bbsInfo);

		if("circle".equals(siteId)) {
			bbsNttVO.setClubId((String)request.getParameter("id"));
		}

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		// 내글 만 표시인 경우
		if( "LSSE03".equals(bbsInfo.getListShowSe()) ) {
			// 로그인이 되어있지 않다면
			if( StringUtil.isEmpty(LoginUtil.getDplctCode(request.getSession())) ) {
				return cmmUseService.backMsg(model, "로그인 후 접근 가능 합니다.");
			}
			// 내 중복 코드
			if(!"ADMIN".equals(LoginUtil.getLoginUserSe(request.getSession()))) {
				bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
			}
		}

		// 게시물 정보
		BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());
		model.addAttribute("bbsNtt", bbsNtt);

		// HTML 사용에 따라 내용을 TEXT로 변환
		if( "N".equals(bbsNtt.getHtmlUseAt()) ) {
			String nttCn = bbsNtt.getNttCn();
			bbsNtt.setNttCn(StringUtil.html2text(nttCn));
			if(nttCn != null && !"".equals(nttCn)) {
				bbsNtt.setNttCn(StringUtil.replaceUrls(bbsNtt.getNttCn()));
			}
		}else{
			String nttCn = bbsNtt.getNttCn();
			bbsNtt.setNttCn(StringUtil.nl2br(nttCn));
		}

		// 첨부파일 목록
		List<BbsAtchmnflVO> bbsAtchmnflList = bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), true);
		model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);

		// 조회수 업데이트
		bbsNttService.updateBbsNttRdcnt(request, bbsNttVO);

		BbsNttAnswer answerParams = new BbsNttAnswer();
		answerParams.setNttNo(bbsNttVO.getNttNo());

		// 답변인 경우
		if( "RTSY03".equals(bbsInfo.getReplySe()) || "RTSY04".equals(bbsInfo.getReplySe()) ) {
			/*
			List<BbsNttAnswer> bbsNttAnswer = bbsNttAnswerService.selectBbsNttAnswerList(answerParams);
			if( null != bbsNttAnswer ) {
				for(int i=0; i<bbsNttAnswer.size(); i++) {
					//List<BbsAnswerAtchmnfl> bbsAnswerAtchmnflList = bbsAnswerAtchmnflService.selectBbsAnswerAtchmnflList(bbsNttAnswer.get(i).getAnswerNo());
					//bbsNttAnswer.get(i).setBbsAnswerAtchmnflList(bbsAnswerAtchmnflList);
				}
				model.addAttribute("bbsNttAnswer", bbsNttAnswer);
			}
			*/
			BbsNttAnswer bbsNttAnswer = bbsNttAnswerService.selectBbsNttAnswer(bbsNttVO.getNttNo());
			if( null != bbsNttAnswer ) {
				bbsNttAnswer.setAnswerCn(StringUtil.html2text(bbsNttAnswer.getAnswerCn()));
				model.addAttribute("bbsNttAnswer", bbsNttAnswer);
			}			
		}

		BbsVO bbsVO = bbsService.selectBbs(bbsNo);

        String userAgent = request.getHeader("user-agent");
        if(MobileUADetector.isMobile(userAgent))
        	model.addAttribute("isMobile", "Y");

		// 통합 사용 이지만 개별 사용페이지인 경우
		bbsNttVO.setIndvdlzShowAt(bbsNttService.isIndvdlzShowAt(bbsInfo, bbsNttVO));

		// 게시물 표시기간 적용
		String nttShowPdValue = "";
		if( !"0".equals(StringUtil.nvl(bbsInfo.getNttShowPd())) ) {
			nttShowPdValue = bbsInfo.getNttShowPd();
		}
		bbsNttVO.setNttShowPdValue(nttShowPdValue);

		// 이전/다음 보기
		int rnum = bbsNttService.selectBbsNttRnum(bbsNttVO);
		bbsNttVO.setRnum(rnum);
System.out.println(bbsNttVO.getOthbcAt() + "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");

		BbsNtt bbsNttPrev = bbsNttService.selectBbsNttPrev(bbsNttVO);
		model.addAttribute("bbsNttPrev", bbsNttPrev);
		BbsNtt bbsNttNext = bbsNttService.selectBbsNttNext(bbsNttVO);
		model.addAttribute("bbsNttNext", bbsNttNext);

		// 댓글 사용 이라면
		if( "Y".equals(bbsInfo.getAnswerUseAt()) ) {
			List<BbsNttComment> bbsNttCommentList = bbsNttCommentService.selectBbsNttCommentList(bbsNttVO.getNttNo());
			model.addAttribute("bbsNttCommentList", bbsNttCommentList);
		}


		return "bbs/" + bbsNttVO.getBbsNo() + "/view.jsp";

	}

	/**
	 * 게시물 수정 페이지로 이동한다.
	 * @param bbsNttVO
	 * @param bbsNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNo + "/updt.jsp"
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_UPDATE, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/updateBbsNttView.do")
    public String updateBbsNttView(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		model.addAttribute("bbsNo", bbsNo);

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		model.addAttribute("bbsInfo", bbsInfo);

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		// 게시물 정보
		BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());
		model.addAttribute("bbsNtt", bbsNtt);

		// 첨부파일 목록
		List<BbsAtchmnflVO> bbsAtchmnflList = bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), false);
		model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);

		// 부서 목록
		model.addAttribute("departmentList", departmentService.selectDepartmentListBySttusYes());

		return "bbs/" + bbsNo + "/updt.jsp";

    }

	/**
	 * 게시물 수정을 처리한다.
	 * @param multiRequest
	 * @param bbsNttVO
	 * @param key
	 * @param request
	 * @param model
	 * @return 수정화면 호출시 : "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp"
	 *               수정화면 처리시 : cmmUseService.redirectMsg(model, "수정을 완료하였습니다.", "/" + siteId + "/selectBbsNttView.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&nttNo=" + bbsNttVO.getNttNo() + "&searchCtgry=" + bbsNttVO.getSearchCtgry() + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd=" + bbsNttVO.getSearchKrwd() + "&pageIndex=" + bbsNttVO.getPageIndex() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode())
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_UPDATE, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/updateBbsNtt.do")
    public String updateBbsNtt(final MultipartHttpServletRequest multiRequest,
    		@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		model.addAttribute("bbsInfo", bbsInfo);

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		// 부서 목록
		model.addAttribute("departmentList", departmentService.selectDepartmentListBySttusYes());

		// 입력데이터
		model.addAttribute("bbsNtt", bbsNttVO);
		// 첨부파일 목록
		List<BbsAtchmnflVO> bbsAtchmnflList = bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), false);
		model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);

		// 유효성 검증
		String[] arrValidate = bbsNttService.validateBbsNtt(bbsNttVO);
		if( "1".equals(arrValidate[0]) ) {
			// validate
			model.addAttribute("isValidate", true);
			model.addAttribute("fieldNm", arrValidate[1]);
			model.addAttribute("message", arrValidate[2]);
			// 입력페이지 이동
			return "bbs/" + bbsNttVO.getBbsNo() + "/updt.jsp";
		}

		// 수정 처리
		try {
			bbsNttService.updateBbsNtt(multiRequest, request, bbsNttVO);
		} catch(Exception e) {
			e.printStackTrace();
			// validate
			model.addAttribute("isValidate", true);
			model.addAttribute("fieldNm", "");
			model.addAttribute("message", e.getMessage());
			// 입력페이지 이동
			return "bbs/" + bbsNttVO.getBbsNo() + "/updt.jsp";
		}

		// 원주시청 - 잊혀질권리
		if ("Y".equals(bbsInfo.getDasUseAt()) ) {
			StringBuffer delFileList = new StringBuffer("");
			Long fileSize = (long) 0;

			try {
				// 등록된 첨부파일 목록조회
				List<BbsAtchmnflVO> bbsAtchmnflViewList = bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), false);
				if (bbsAtchmnflViewList.size() != 0 ) {
					for (int LoopI = 0; LoopI < bbsAtchmnflViewList.size();LoopI++) {

						// 파일사이즈
						fileSize = fileSize + bbsAtchmnflViewList.get(LoopI).getFileSize();

						// 삭제될 파일 리스트
						if (StringUtil.isEmpty(delFileList.toString())) {
							delFileList.append(FileMngUtil.getRealPath(bbsAtchmnflViewList.get(LoopI).getStorePath() + "/" + bbsAtchmnflViewList.get(LoopI).getStoreFileNm()));
						} else {
							delFileList.append(", " + FileMngUtil.getRealPath(bbsAtchmnflViewList.get(LoopI).getStorePath() + "/" + bbsAtchmnflViewList.get(LoopI).getStoreFileNm()));
						}
					}
				}
				DasAgentUtil das = new DasAgentUtil();

				String dasDtDe = "Y".equals(bbsNttVO.getDasPrmanentAt()) ? "29991231235959000": bbsNttVO.getDasDtDe().replaceAll("-", "")+"235959000"; // 잊혀질권리 삭제일자
				das.AgentFileCreate(
						String.valueOf(bbsNttVO.getFrstRegisterPnttm()+"000")
						, String.valueOf(bbsNttVO.getWriterIp())
						, String.valueOf(siteId)
						, String.valueOf(bbsNttVO.getBbsNo())
						, String.valueOf(bbsNttVO.getNttNo())
						, delFileList.toString()
						, "DELETE FROM NEOCMS.TN_BBS_NTT WHERE BBS_NO = "+bbsNttVO.getBbsNo()+" AND NTT_NO = "+bbsNttVO.getNttNo()+";DELETE FROM NEOCMS.TN_BBS_ATCHMNFL WHERE BBS_NO = "+bbsNttVO.getBbsNo()+" AND NTT_NO ="+bbsNttVO.getNttNo()
						, String.valueOf(fileSize)
						, String.valueOf(dasDtDe)
						);
			} catch(Exception ee) {
				ee.printStackTrace();
				System.out.println("Das input Error : "+ee.getMessage());
			}
		}

		String returnPageUrl = ( !StringUtil.isEmpty(bbsNttVO.getMyView()) && bbsNttVO.getMyView().equals("on") ) ? "selectBbsNttMyView.do" : "selectBbsNttView.do";

		return cmmUseService.redirectMsg(model, "수정을 완료하였습니다.", "/" + siteId + "/" + returnPageUrl + "?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&nttNo=" + bbsNttVO.getNttNo() + "&searchCtgry=" + bbsNttVO.getSearchCtgry() + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd=" + bbsNttVO.getSearchKrwd() + "&pageIndex=" + bbsNttVO.getPageIndex() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode());

    }

	/**
	 * 민원게시글 상태변경
	 * @param bbsNttVO
	 * @param siteId
	 * @param key
	 * @param request
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_UPDATE, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/updateBbsNttCvplSttus.do")
    public String updateBbsNttCvplSttus(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		model.addAttribute("bbsInfo", bbsInfo);

		String returnPageUrl = ( !StringUtil.isEmpty(bbsNttVO.getMyView()) && bbsNttVO.getMyView().equals("on") ) ? "selectBbsNttMyView.do" : "selectBbsNttView.do";
		try {
			bbsNttService.updateBbsNttCvplSttus(bbsNttVO);
		} catch(Exception e) {
			e.printStackTrace();
			// validate
			model.addAttribute("isValidate", true);
			model.addAttribute("fieldNm", "");
			model.addAttribute("message", e.getMessage());
			// 입력페이지 이동
			return "bbs/" + bbsNttVO.getBbsNo() + "/view.jsp";
		}
		return cmmUseService.redirectMsg(model, "상태가 변경되었습니다.", "/" + siteId + "/" + returnPageUrl + "?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&nttNo=" + bbsNttVO.getNttNo() + "&searchCtgry=" + bbsNttVO.getSearchCtgry() + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd=" + bbsNttVO.getSearchKrwd() + "&pageIndex=" + bbsNttVO.getPageIndex() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode());

	}

	/**
	 * 게시물을 삭제한다.
	 * @param bbsNttVO
	 * @param key
	 * @param model
	 * @return cmmUseService.redirectMsg(model, "삭제를 완료하였습니다.", "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&searchCtgry=" + bbsNttVO.getSearchCtgry() + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd=" + bbsNttVO.getSearchKrwd() + "&pageIndex=" + bbsNttVO.getPageIndex())
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_DELETE, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/deleteBbsNtt.do")
    public String deleteBbsNtt(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		if( 0 != bbsNttService.selectBbsNttLwprtCnt(bbsNttVO) ) {
			return cmmUseService.backMsg(model, "답변글이 있어 삭제할 수 없습니다.");
		}

		// 게시물 삭제처리
		bbsNttService.updateBbsNttDeleteAt(bbsNttVO.getNttNo());

		String returnPageUrl = ( !StringUtil.isEmpty(bbsNttVO.getMyView()) && bbsNttVO.getMyView().equals("on") ) ? "selectBbsNttMyList.do" : "selectBbsNttList.do";

		return cmmUseService.redirectMsg(model, "삭제를 완료하였습니다.", "/" + siteId + "/" + returnPageUrl + "?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&searchCtgry=" + bbsNttVO.getSearchCtgry() + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd=" + bbsNttVO.getSearchKrwd() + "&pageIndex=" + bbsNttVO.getPageIndex() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode());

    }

	/**
	 * 게시물 답변(계층형) 화면으로 이동한다.
	 * @param bbsNo
	 * @param nttNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNo + "/reply.jsp"
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_REPLY, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/addBbsNttReplyView.do")
    public String addBbsNttReplyView(@PathVariable("siteId") String siteId, @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @RequestParam("bbsNo") int bbsNo, @RequestParam("nttNo") int nttNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		model.addAttribute("bbsNo", bbsNo);
		model.addAttribute("nttNo", nttNo);

		bbsNttVO.setWriterNm(LoginUtil.getLoginNm(request.getSession()));
		bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
		model.addAttribute("bbsNttVO", bbsNttVO);

		// 부서 목록
		model.addAttribute("departmentList", departmentService.selectDepartmentListBySttusYes());

		return "bbs/" + bbsNo + "/reply.jsp";

    }

	/**
	 * 게시물 답변(계층형)을 처리한다.
	 * @param multiRequest
	 * @param bbsNttVO
	 * @param key
	 * @param request
	 * @param model
	 * @return 답변화면 호출시 : "bbs/" + bbsNttVO.getBbsNo() + "/reply.jsp"
	 *               답변화면 처리시 : cmmUseService.redirectMsg(model, "등록을 완료하였습니다.", "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo())
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_REPLY, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/addBbsNttReply.do")
    public String addBbsNttReply(final MultipartHttpServletRequest multiRequest,
    		@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		Bbs bbs = bbsService.selectBbs(bbsNttVO.getBbsNo());
		// 질문자 익명게시판은 작성자명이 자동이 아님!
		if( !"anny".equals(bbs.getSkinId()) ) {
			bbsNttVO.setWriterNm(LoginUtil.getLoginNm(request.getSession()));
		}
		bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));

		model.addAttribute("bbsNo", bbsNttVO.getBbsNo());
		model.addAttribute("nttNo", bbsNttVO.getNttNo());

		// 부서 목록
		model.addAttribute("departmentList", departmentService.selectDepartmentListBySttusYes());

		// 입력데이터
		model.addAttribute("bbsNtt", bbsNttVO);

		// 유효성 검증
		String[] arrValidate = bbsNttService.validateBbsNtt(bbsNttVO);
		if( "1".equals(arrValidate[0]) ) {
			// validate
			model.addAttribute("isValidate", true);
			model.addAttribute("fieldNm", arrValidate[1]);
			model.addAttribute("message", arrValidate[2]);
			// 입력페이지 이동
			return "bbs/" + bbsNttVO.getBbsNo() + "/reply.jsp";
		}

		// 답변 처리
		try {
			bbsNttService.insertBbsNttReply(multiRequest, request, bbsNttVO);
		} catch(Exception e) {
			// validate
			model.addAttribute("isValidate", true);
			model.addAttribute("fieldNm", "");
			model.addAttribute("message", e.getMessage());
			// 입력페이지 이동
			return "bbs/" + bbsNttVO.getBbsNo() + "/reply.jsp";
		}

		return cmmUseService.redirectMsg(model, "등록을 완료하였습니다.", "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode());

    }

	/**
	 * 내 게시물의 목록을 조회한다.
	 * @param bbsNttVO
	 * @param bbsNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNo + "/myList.jsp"
	 * @throws Exception
	 */
	@Interceptor(value={"bbsAuthorBinding","templateBinding"}, mode=Mode.BBS_MYLIST, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/selectBbsNttMyList.do")
    public String selectBbsNttMyList(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 번호
		model.addAttribute("bbsNo", bbsNo);

		// 게시판 상세 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		// 내 중복 코드
        bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));

		// 게시물 페이징
		bbsNttVO.setPageUnit(bbsInfo.getListCo());
		bbsNttVO.setPageSize(bbsInfo.getPageCo());

		// 게시물 카운트
		int totCnt = bbsNttService.selectBbsNttTotCnt(bbsNttVO);
		// 페이징 정보
    	NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    	// 페이징 정보 등록
        model.addAttribute("paginationInfo", neoPaginationInfo);

        // 게시물 목록
		List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, bbsNttVO);
		model.addAttribute("bbsNttList", bbsNttList);

		// 게시판 정보
		BbsVO bbsVO = bbsService.selectBbs(bbsNo);

		// 동영상 게시판이면
		if( "movie".equals(bbsVO.getSkinId()) ) {
			// 게시물 번호
			int nttNo = 0;
			String strNttNo = StringUtil.nvl((String)request.getParameter("nttNo"));
			// 게시물 번호가 없다면 첫번째 게시물을 조회한다.
			if( StringUtil.isEmpty(strNttNo) ) {
				if( 0 != bbsNttList.size() ) {
					nttNo = bbsNttList.get(0).getNttNo();
				}
			} else {
				nttNo = Integer.parseInt(strNttNo);
			}
			// 게시물 번호가 있다면 해당 게시물 번호로 게시물을 조회한다.
			if( 0 != nttNo ) {
				// 게시물 정보
				BbsNtt bbsNtt = bbsNttService.selectBbsNtt(nttNo);
				model.addAttribute("bbsNtt", bbsNtt);
				// HTML 사용에 따라 내용을 TEXT로 변환
				if( "N".equals(bbsNtt.getHtmlUseAt()) ) {
					String nttCn = bbsNtt.getNttCn();
					bbsNtt.setNttCn(StringUtil.html2text(nttCn));
					if(nttCn != null && !"".equals(nttCn)) {
						bbsNtt.setNttCn(StringUtil.replaceUrls(bbsNtt.getNttCn()));
					}
				}
				// 첨부파일 목록
				List<BbsAtchmnflVO> bbsAtchmnflList = bbsAtchmnflService.selectBbsAtchmnflList(request, nttNo, true);
				model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
			}
		}

		return "bbs/" + bbsNo + "/myList.jsp";

    }

	@Interceptor(value={"templateBinding"}, mode=Mode.BBS_MYLIST, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/myBbsNttList.do")
    public String myBbsNttList(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 내 중복 코드
        bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
        bbsNttVO.setWriterUserId(LoginUtil.getLoginId(request.getSession()));

		// 게시물 카운트
		int totCnt = bbsNttService.selectMyBbsNttTotCnt(bbsNttVO);
		// 페이징 정보
    	NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    	// 페이징 정보 등록
        model.addAttribute("paginationInfo", neoPaginationInfo);

        // 게시물 목록
		List<BbsNttVO> bbsNttList = bbsNttService.selectMyBbsNttList(bbsNttVO);
		model.addAttribute("bbsNttList", bbsNttList);

		return "NeoCMS/cop/bbs/ntt/webMyBbsNttList";

    }


	@Interceptor(value={"templateBinding", "loginAuthorInterceptor"}, mode=Mode.BBS_MYLIST, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/myBbsNttCvplList.do")
    public String myBbsNttCvplList(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 내 중복 코드
        bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
        bbsNttVO.setWriterUserId(LoginUtil.getLoginId(request.getSession()));

		// 게시물 카운트
		int totCnt = bbsNttService.selectMyBbsNttCvplTotCnt(bbsNttVO);
		// 페이징 정보
    	NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    	// 페이징 정보 등록
        model.addAttribute("paginationInfo", neoPaginationInfo);

        // 게시물 목록
		List<BbsNttVO> bbsNttList = bbsNttService.selectMyBbsNttCvplList(bbsNttVO);
		model.addAttribute("bbsNttList", bbsNttList);

		return "NeoCMS/cop/bbs/ntt/webMyBbsNttCvplList";

    }

	@Interceptor(value={"templateBinding", "loginAuthorInterceptor"}, mode=Mode.BBS_MYLIST, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/selectCvplHistList.do")
    public String selectCvplHistList(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("key") int key,
    		HttpServletRequest request, ModelMap model) throws Exception {

		Map<String, String> answerSttusMap = cmmUseService.selectCmmnDetailCodeMap("CVPLST");
		model.addAttribute("answerSttusMap", answerSttusMap);

		// 게시판 정보
		String dplctCode = bbsNttService.selectBbsNttFindByDplctCode(bbsNttVO.getNttNo());

		// 내 중복 코드
        bbsNttVO.setWriterDplctCode(dplctCode);

		// 게시물 카운트
		int totCnt = bbsNttService.selectMyBbsNttCvplTotCnt(bbsNttVO);
		// 페이징 정보
    	NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    	// 페이징 정보 등록
        model.addAttribute("paginationInfo", neoPaginationInfo);

        // 게시물 목록
		List<BbsNttVO> bbsNttList = bbsNttService.selectMyBbsNttCvplList(bbsNttVO);
		model.addAttribute("bbsNttList", bbsNttList);

		return "NeoCMS/cop/bbs/ntt/webCvplHistList";

    }

	/**
	 * 게시물의 내글 상세정보를 조회한다.
	 * @param bbsNttVO
	 * @param bbsNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNttVO.getBbsNo() + "/myView.jsp"
	 * @throws Exception
	 */
	@Interceptor(value = {"bbsAuthorBinding","templateBinding"}, mode = Mode.BBS_MYVIEW, type=AccesType.BBS)
	@RequestMapping(value="/{siteId}/selectBbsNttMyView.do")
    public String selectBbsNttMyView(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		// 게시판 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		model.addAttribute("bbsInfo", bbsInfo);

		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
		}

		// 게시물 정보
		BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());
		model.addAttribute("bbsNtt", bbsNtt);

		// 내 중복 코드
        bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));

		// HTML 사용에 따라 내용을 TEXT로 변환
		if( "N".equals(bbsNtt.getHtmlUseAt()) ) {
			String nttCn = bbsNtt.getNttCn();
			bbsNtt.setNttCn(StringUtil.html2text(nttCn));
			if(nttCn != null && !"".equals(nttCn)) {
				bbsNtt.setNttCn(StringUtil.replaceUrls(bbsNtt.getNttCn()));
			}
		}

		// 첨부파일 목록
		List<BbsAtchmnflVO> bbsAtchmnflList = bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), true);
		model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);

		// 조회수 업데이트
		bbsNttService.updateBbsNttRdcnt(request, bbsNttVO);

		// 답변인 경우
		if( "RTSY03".equals(bbsInfo.getReplySe()) ) {
			BbsNttAnswer bbsNttAnswer = bbsNttAnswerService.selectBbsNttAnswer(bbsNttVO.getNttNo());
			if( null != bbsNttAnswer ) {
//				bbsNttAnswer.setAnswerCn(StringUtil.html2text(bbsNttAnswer.getAnswerCn()));
				model.addAttribute("bbsNttAnswer", bbsNttAnswer);
			}
		}

		// 이전/다음 보기
		int rnum = bbsNttService.selectBbsNttRnum(bbsNttVO);
		bbsNttVO.setRnum(rnum);
		BbsNtt bbsNttPrev = bbsNttService.selectBbsNttPrev(bbsNttVO);
		model.addAttribute("bbsNttPrev", bbsNttPrev);
		BbsNtt bbsNttNext = bbsNttService.selectBbsNttNext(bbsNttVO);
		model.addAttribute("bbsNttNext", bbsNttNext);

		// 댓글 사용 이라면
		if( "Y".equals(bbsInfo.getAnswerUseAt()) ) {
			List<BbsNttComment> bbsNttCommentList = bbsNttCommentService.selectBbsNttCommentList(bbsNttVO.getNttNo());
			model.addAttribute("bbsNttCommentList", bbsNttCommentList);
		}

		return "bbs/" + bbsNttVO.getBbsNo() + "/myView.jsp";

	}


	@RequestMapping(value="/{siteId}/moveMultiBbsNtt.do")
    public String moveMultiBbsNtt(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId,
    		@RequestParam(value="key", required=false) Integer key,
    		@RequestParam(value="chkid", required=false) Integer[] chkid,
    		@RequestParam(value="tBbsNo", required=false) Integer tBbsNo,
    		HttpServletRequest request, ModelMap model) throws Exception {

		HttpSession session = request.getSession();

		if( !LoginUtil.isAdmin(session) && !bbsAuthorService.authorSiteMngr(session, siteId) && !bbsAuthorService.authorBbsMngr(session, bbsNttVO.getBbsNo())) {
			return cmmUseService.backMsg(model, "게시물 이동권한이 없습니다.");
		}

		BbsAuthor auth = bbsAuthorService.authorBbs(session, siteId, tBbsNo, 0, 0, Mode.BBS_ADD);
		if(!auth.isAddAuth()) {
			return cmmUseService.backMsg(model, "게시물을 이동할 게시판에 쓰기 권한이 없습니다.");
		}

		if(tBbsNo != null && chkid != null && chkid.length > 0) {
			for(int i=chkid.length-1; i >= 0; i--) {
				bbsNttService.moveBbsNtt(chkid[i], tBbsNo);
			}
		}
		return cmmUseService.redirectMsg(model, "이동을 완료하였습니다.", "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() );
    }


	@RequestMapping(value="/{siteId}/deleteMultiBbsNtt.do")
    public String deleteMultiBbsNtt(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId,
    		@RequestParam(value="key", required=false) Integer key,
    		@RequestParam(value="chkid", required=false) Integer[] chkid,
    		HttpServletRequest request, ModelMap model) throws Exception {

		HttpSession session = request.getSession();

		if( !LoginUtil.isAdmin(session) && !bbsAuthorService.authorSiteMngr(session, siteId) && !bbsAuthorService.authorBbsMngr(session, bbsNttVO.getBbsNo())) {
			return cmmUseService.backMsg(model, "게시물 삭제권한이 없습니다.");
		}

		if(chkid != null && chkid.length > 0) {
			for(int i=chkid.length-1; i >= 0; i--) {
				bbsNttService.updateBbsNttDeleteAt(chkid[i]);
			}
		}
		return cmmUseService.redirectMsg(model, "삭제를 완료하였습니다.", "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo());
    }
	
	/**
	 * 게시물의 목록을 조회한다.
	 * @param bbsNttVO
	 * @param bbsNo
	 * @param request
	 * @param model
	 * @return "bbs/" + bbsNo + "/list.jsp"
	 * @throws Exception
	 */
    
    @Interceptor(value={"bbsAuthorBinding"}, mode=Mode.BBS_LIST, type=AccesType.BBS)
    @RequestMapping(value="/{siteId}/selectBbsNttExcelList.do")
    public String selectBbsNttAdminTotalList(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
    		@PathVariable("siteId") String siteId,
    		@RequestParam("bbsNo") int bbsNo, HttpServletRequest request, ModelMap model) throws Exception {
		// 게시판 번호
		model.addAttribute("bbsNo", bbsNo);
		
		// 게시판 상세 정보
		BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
		
		
		List<BbsField> bbsFieldListShowList =  bbsFieldService.selectListShowList(bbsNo);
		List<BbsField> bbsFieldSearchList =  bbsFieldService.selectBbsFieldSearchList(bbsNo);
		List<BbsField> bbsFieldInputShowList =  bbsFieldService.selectInputShowList(bbsNo);

		model.addAttribute("bbsFieldInputShowList",bbsFieldInputShowList);
		model.addAttribute("bbsFieldListShowList",bbsFieldListShowList);
		model.addAttribute("bbsFieldSearchList",bbsFieldSearchList);

		boolean bbsAuthor = false;
		boolean isBbsAuthor = bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo());
		boolean isBbsDeptAuthor = bbsAuthorService.authorBbsMngrDept(request.getSession(), bbsNttVO.getBbsNo(), siteId);

		
		// 내글 만 표시인 경우
		if( "LSSE03".equals(bbsInfo.getListShowSe()) ) {
			// 로그인이 되어있지 않다면
			if( StringUtil.isEmpty(LoginUtil.getDplctCode(request.getSession())) ) {
				//return cmmUseService.redirectMsg(model, "로그인 후 접근 가능 합니다.", "/"+siteId+"/login.do?key="+loginKey+"&rurl=" + URLEncoder.encode("/"+siteId+"/sub.do?key="+StringUtil.nvl((String)request.getParameter("key")),"UTF-8"));
			}

			if( isBbsAuthor || isBbsDeptAuthor ) bbsAuthor = true;
			if( !LoginUtil.isAdmin(request.getSession()) && !bbsAuthor) {
				// 내 중복 코드
		        bbsNttVO.setWriterDplctCode(LoginUtil.getDplctCode(request.getSession()));
			}

		}
		
		
		// 통합사용이면
		if( "Y".equals(bbsInfo.getIntegrUseAt()) ) {
			// integrDeptCode가 없다면 잘못된 접근
			if( StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode()) ) {
				return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
			}
//		} else {
//			bbsNttVO.setIntegrDeptCode(null);
		}
		// 통합 사용 이지만 개별 사용페이지인 경우
		bbsNttVO.setIndvdlzShowAt(bbsNttService.isIndvdlzShowAt(bbsInfo, bbsNttVO));

		if(LoginUtil.isAdmin(request.getSession())){
			bbsNttVO.setDeleteAt("Y");
		}
		// 게시물 페이징
		if("".equals(bbsNttVO.getPageUnit())){
			bbsNttVO.setPageUnit(bbsInfo.getListCo());
			bbsNttVO.setPageSize(bbsInfo.getPageCo());
		}
		//bbsNttVO.setPageUnit(bbsInfo.getListCo());
		//bbsNttVO.setPageSize(bbsInfo.getPageCo());
		
		// 게시물 카운트
		int totCnt = bbsNttService.selectBbsNttTotCnt(bbsNttVO);
		// 페이징 정보
    	NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    	// 페이징 정보 등록
        model.addAttribute("paginationInfo", neoPaginationInfo);

        // 게시물 목록
		List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, bbsNttVO);
		model.addAttribute("bbsNttList", bbsNttList);
		model.addAttribute("bbsInfo",bbsInfo);
		// 게시판 정보
		BbsVO bbsVO = bbsService.selectBbs(bbsNo);
		model.addAttribute("bbsName", bbsVO.getBbsNm());
		// 동영상 게시판이면
		if( "movie".equals(bbsVO.getSkinId()) ) {
			// 게시물 번호
			int nttNo = 0;
			String strNttNo = StringUtil.nvl((String)request.getParameter("nttNo"));
			// 게시물 번호가 없다면 첫번째 게시물을 조회한다.
			if( StringUtil.isEmpty(strNttNo) ) {
				if( 0 != bbsNttList.size() ) {
					nttNo = bbsNttList.get(0).getNttNo();
				}
			} else {
				nttNo = Integer.parseInt(strNttNo);
			}
			// 게시물 번호가 있다면 해당 게시물 번호로 게시물을 조회한다.
			if( 0 != nttNo ) {
				// 게시물 정보
				BbsNtt bbsNtt = bbsNttService.selectBbsNtt(nttNo);
				model.addAttribute("bbsNtt", bbsNtt);
				// HTML 사용에 따라 내용을 TEXT로 변환
				if( "N".equals(bbsNtt.getHtmlUseAt()) ) {
					String nttCn = bbsNtt.getNttCn();
					bbsNtt.setNttCn(StringUtil.html2text(nttCn));
				}
				// 첨부파일 목록
				List<BbsAtchmnflVO> bbsAtchmnflList = bbsAtchmnflService.selectBbsAtchmnflList(request, nttNo, true);
				model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
			}
		}


		return "NeoCMS/cop/bbs/bbsNttExcelList";
		
    }

}
