package kr.co.hanshinit.NeoCMS.cop.bbs.ntt.web;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import egovframework.com.cmm.LoginVO;
import kr.co.hanshinit.NeoCMS.cmm.service.CmmUseService;
import kr.co.hanshinit.NeoCMS.cmm.service.FileMngUtil;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.AccesType;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.BbsMode;
import kr.co.hanshinit.NeoCMS.cmm.stereotype.Interceptor;
import kr.co.hanshinit.NeoCMS.cmm.util.SessionUtil;
import kr.co.hanshinit.NeoCMS.cmm.util.StringUtil;
import kr.co.hanshinit.NeoCMS.cop.bbs.bfm.service.BbsFieldService;
import kr.co.hanshinit.NeoCMS.cop.bbs.bim.service.BbsInfo;
import kr.co.hanshinit.NeoCMS.cop.bbs.bim.service.BbsInfoService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAtchmnflService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAtchmnflVO;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsAuthorService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNtt;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttAnswer;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttAnswerService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttComment;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttCommentService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttService;
import kr.co.hanshinit.NeoCMS.cop.bbs.ntt.service.BbsNttVO;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.BbsService;
import kr.co.hanshinit.NeoCMS.cop.bbs.service.BbsVO;
import kr.co.hanshinit.NeoCMS.cop.lzm.lzi.service.LinkZoneItemService;
import kr.co.hanshinit.NeoCMS.cop.lzm.lzi.service.LinkZoneItemVO;
import kr.co.hanshinit.NeoCMS.sym.log.llg.service.IndvdlinfoLogService;
import kr.co.hanshinit.NeoCMS.sym.sit.mnu.service.Menu;
import kr.co.hanshinit.NeoCMS.sym.sit.mnu.service.MenuService;
import kr.co.hanshinit.NeoCMS.tag.pagination.NeoPaginationInfo;
import kr.co.hanshinit.NeoCMS.uat.uia.service.LoginUtil;

/**
 * 게시물을 관리하기 위한 비즈니스 구현 클래스
 *
 * @author (주)한신정보기술 연구개발팀 최관형
 * @since 2014.06.03
 * @version 1.0
 * @see
 *
 *      <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일           수정자     수정내용
 *  ------------- -------- ---------------------------
 *  2014.06.03 최관형     최초 생성
 *  2014.07.03 최관형     통합 게시판을 미니보드 형태로 조회 추가
 *  2015.04.21 최관형     siteId가 빠진 URL로 변경
 *  2015.07.06 최관형     다시 siteId 추가
 *
 *      </pre>
 */
@Controller
public class BbsNttController {

  protected Logger log = LoggerFactory.getLogger(this.getClass());

  /** bbsNttService */
  @Resource(name = "bbsNttService")
  private BbsNttService bbsNttService;

  /** bbsNttAnswerService */
  @Resource(name = "bbsNttAnswerService")
  private BbsNttAnswerService bbsNttAnswerService;

  /** bbsAtchmnflService */
  @Resource(name = "bbsAtchmnflService")
  private BbsAtchmnflService bbsAtchmnflService;

  /** bbsInfoService */
  @Resource(name = "bbsInfoService")
  private BbsInfoService bbsInfoService;

  /** bbsFieldService */
  @Resource(name = "bbsFieldService")
  private BbsFieldService bbsFieldService;

  /** bbsService */
  @Resource(name = "bbsService")
  private BbsService bbsService;

  /** bbsNttCommentService */
  @Resource(name = "bbsNttCommentService")
  private BbsNttCommentService bbsNttCommentService;

  /** cmmUseService */
  @Resource(name = "cmmUseService")
  private CmmUseService cmmUseService;

  /** FileMngUtil */
  @Resource(name = "FileMngUtil")
  private FileMngUtil fileMngUtil;

  /** bbsAuthorService */
  @Resource(name = "bbsAuthorService")
  private BbsAuthorService bbsAuthorService;

  /** linkZoneItemService **/
  @Resource(name = "linkZoneItemService")
  private LinkZoneItemService linkZoneItemService;

  @Resource(name = "menuService")
  private MenuService menuService;

  @Resource(name = "indvdlinfoLogService")
  private IndvdlinfoLogService indvdlinfoLogService;

  /**
   * 게시물의 목록을 조회한다.
   *
   * @param bbsNttVO
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNo + "/list.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.LIST, type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/selectBbsNttList.do")
  public String selectBbsNttList(
        @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO
        , @PathVariable("siteId") String siteId
        , @RequestParam("bbsNo") int bbsNo
        , HttpServletRequest request
        , ModelMap model
      ) throws Exception {
    //System.out.println("\n\n/selectBbsNttList.do\n\n");

    // 게시판 정보
    BbsVO bbsVO = bbsService.selectBbs(bbsNo);

    // siteId가 biz 라면 비공개 개시물은 조회하지 않는다.
    if( "biz".equals(siteId) ) {
      System.out.println(">>>\tsiteId : " + siteId);
      bbsNttVO.setOthbcAt("Y");
    }




    // 뉴스일 경우 Aditfield9가 Y인것만 검색해서 추출
    if (!siteId.equals("staff")) {
      if ("movie".equals(bbsVO.getSkinId()) || "mmnws".equals(bbsVO.getSkinId())
          || "hanamtv".equals(bbsVO.getSkinId()) || "youtube".equals(bbsVO.getSkinId())) {
        bbsNttVO.setAditfield9("Y");
      }
    }



    if (siteId.equals("staff")) {
      // 시민명예기자는 자신의 글만 보이게 수정, 미발행만 보이게 수정
      if (LoginUtil.isJrnlstAdmin(request.getSession()) == true) {
        bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
        bbsNttVO.setAditfield9("N");
      }
    }



    /**
     * 시장에게 바란다 시작일 종료일 검색기능 추가
     *
     */

    if (bbsNo == 65) {
      String startSearchDate;
      String endSearchDate;
      if (bbsNttVO.getStartSearchDate() != null && !bbsNttVO.getStartSearchDate().equals("")) {
        startSearchDate = bbsNttVO.getStartSearchDate().replaceAll("-", "");
        startSearchDate += "0000000";
        bbsNttVO.setStartSearchDate(startSearchDate);
      }
      if (bbsNttVO.getEndSearchDate() != null && !bbsNttVO.getEndSearchDate().equals("")) {
        endSearchDate = bbsNttVO.getEndSearchDate().replaceAll("-", "");
        endSearchDate += "235959";
        bbsNttVO.setEndSearchDate(endSearchDate);
      }
    }



    // 게시판 번호
    model.addAttribute("bbsNo", bbsNo);

    // 게시판 상세 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());


    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
      // } else {
      // bbsNttVO.setIntegrDeptCode(null);
    }

    // 신청기능 사용이면서 기간에 해당이 안되면 메시지 후 이전페이지로 넘김
    if (!bbsService.isRequestPeriod(bbsInfo)) {
      model.addAttribute("ReqstAt", "Y");
      model.addAttribute("ReqstPdMssage", bbsInfo.getReqstPdMssage());
    }


    // 통합 사용 이지만 개별 사용페이지인 경우
    bbsNttVO.setIndvdlzShowAt(bbsNttService.isIndvdlzShowAt(bbsInfo, bbsNttVO));

    // 내글 만 표시인 경우
    if ("LSSE03".equals(bbsInfo.getListShowSe())) {
      // 로그인이 되어있지 않다면
      if (StringUtil.isEmpty(bbsAuthorService.getUserDplctCode(request.getSession()))) {
        //return cmmUseService.backMsg(model, "로그인 후 접근 가능 합니다.");
        // 20210127 로그인 페이지로 보낸다.
        String rurl = "https://www.hanam.go.kr/www/selectBbsNttList.do";
        rurl += "?bbsNo=" + bbsNo + "&key=" + request.getParameter("key");

        request.setAttribute("rurl", rurl);
        model.addAttribute("rurl", rurl);

        request.getSession().setAttribute("_rurl_", rurl);
        request.getSession().setAttribute("_mode_", "LOGIN");

        //"/www/loginView.do";
        return cmmUseService.redirectMsg(model, "로그인 후 접근 가능 합니다.", "/www/loginView.do");
      }
      // 내 중복 코드
      bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
    }



    // 비공개 게시판
    if (bbsInfo.getClsdrUseAt().equals("Y")) {
      // 로그인이 되어있지 않다면
      if (StringUtil.isEmpty(bbsAuthorService.getUserDplctCode(request.getSession()))) {
        //return cmmUseService.backMsg(model, "로그인 후 접근 가능 합니다.");
        // 20210127 로그인 페이지로 보낸다.
        String rurl = "https://www.hanam.go.kr/www/selectBbsNttList.do";
        rurl += "?bbsNo=" + bbsNo + "&key=" + request.getParameter("key");

        request.setAttribute("rurl", rurl);
        model.addAttribute("rurl", rurl);

        request.getSession().setAttribute("_rurl_", rurl);
        request.getSession().setAttribute("_mode_", "LOGIN");

        //"/www/loginView.do";
        return cmmUseService.redirectMsg(model, "로그인 후 접근 가능 합니다.", "/www/loginView.do");
      }
      // 최고관리자, 사이트관리자, 게시판 관리자가 아닌 경우는 본인의 글만 보여지도록 세팅.
      if (LoginUtil.isAdmin(request.getSession()) == false
          && bbsAuthorService.authorSiteMngr(request.getSession(), siteId) == false
          && bbsAuthorService.authorBbsMngr(request.getSession(), bbsNo) == false) {
        bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
      }
    }


    //  스마트시티 아이디어공모전 (BBS_NO 1724) 게시판이라면,
    //  일반 시민은 목록에 본인의 게시글만 조회한다.
    //  관리자라면 모든 글을 조회한다.
    if( bbsNo == 1724 ) {
      System.out.println(">>>\t스마트시티 아이디어공모전 (BBS_NO 1724) : " + bbsNo);
      // 로그인이 되어있지 않다면
      if (StringUtil.isEmpty(bbsAuthorService.getUserDplctCode(request.getSession()))) {
        // return cmmUseService.backMsg(model, "로그인 후 접근 가능 합니다.");
        // 20210127 로그인 페이지로 보낸다.
        String rurl = "https://www.hanam.go.kr/www/selectBbsNttList.do?bbsNo=1724&key=6340";

        request.setAttribute("rurl", rurl);
        model.addAttribute("rurl", rurl);

        request.getSession().setAttribute("_rurl_", rurl);
        request.getSession().setAttribute("_mode_", "LOGIN");

        //"/www/loginView.do";
        return cmmUseService.redirectMsg(model, "로그인 후 접근 가능 합니다.", "/www/loginView.do");
      }
      // 최고관리자, 사이트관리자, 게시판 관리자가 아닌 경우는 본인의 글만 보여지도록 세팅.
      boolean isAdmin = LoginUtil.isAdmin(request.getSession()) == true;
      boolean isSiteMngr = bbsAuthorService.authorSiteMngr(request.getSession(), siteId) == true;
      boolean isBbsMngr = bbsAuthorService.authorBbsMngr(request.getSession(), bbsNo) == true;
      System.out.println("isAdmin : " + isAdmin + ", isSiteMngr : " + isSiteMngr + ", isBbsMngr : " + isBbsMngr);
      System.out.println("userDplctCode : " + bbsAuthorService.getUserDplctCode(request.getSession()));
      if ( !isAdmin && !isSiteMngr && !isBbsMngr ) {
        System.out.println("\t\t>> isCitizenUser!! <<");
        bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
      }
    }

    // 게시물 페이징
    bbsNttVO.setPageUnit(bbsInfo.getListCo());
    bbsNttVO.setPageSize(bbsInfo.getPageCo());

    // 게시물 카운트
    int totCnt = bbsNttService.selectBbsNttTotCnt(bbsNttVO);
    // 페이징 정보
    NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    // 페이징 정보 등록
    model.addAttribute("paginationInfo", neoPaginationInfo);

    // 게시물 목록
    List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, bbsNttVO);
    // 비공개 게시물일 경우 이름 * 처리
    if (bbsNttList != null) {
      String othbcAt = "Y";
      String writer = "";
      for (int i = 0; i < bbsNttList.size(); i++) {
        othbcAt = bbsNttList.get(i).getOthbcAt();
        writer = bbsNttList.get(i).getWriterNm();
        StringBuilder nameArr = new StringBuilder();
        if ("N".equals(othbcAt) || "Y".equals(bbsInfo.getClsdrUseAt())) {
          for (int j = 0; j < writer.length(); j++) {
            if (j == 1 || j == 2)
              nameArr.append("*");
            else
              nameArr.append(writer.charAt(j));
          }
          bbsNttList.get(i).setWriterNm(nameArr.toString());
        }
      }
    }


    model.addAttribute("bbsNttList", bbsNttList);



    // 민원게시판의 경우 전부 이름 마스킹 처리
    if ("h5minwon".equals(bbsVO.getSkinId())) {
      for (int i = 0; i < bbsNttList.size(); i++) {
        String writer = "";
        writer = bbsNttList.get(i).getWriterNm();
        StringBuilder nameArr = new StringBuilder();
        for (int j = 0; j < writer.length(); j++) {
          if (j == 1)
            nameArr.append("*");
          else
            nameArr.append(writer.charAt(j));
          bbsNttList.get(i).setWriterNm(nameArr.toString());
        }
      }
    }
    // 시장에게 바란다 통계처리
    if (bbsNo == 65) {

      BbsVO stv = new BbsVO();
      stv.setBgnde(bbsNttVO.getBgnde());
      stv.setEndde(bbsNttVO.getEndde());
      List<BbsVO> bbsStatInfoList = bbsService.selectMayorBbsStatsInfoList(stv);
      model.addAttribute("bbsStatInfoList", bbsStatInfoList);
    }

    // 동영상 게시판이면
    if ("movie".equals(bbsVO.getSkinId())) {
      // 게시물 번호
      int nttNo = 0;
      String strNttNo = StringUtil.nvl(request.getParameter("nttNo"));
      // 게시물 번호가 없다면 첫번째 게시물을 조회한다.
      if (StringUtil.isEmpty(strNttNo)) {
        if (0 != bbsNttList.size()) {
          nttNo = bbsNttList.get(0).getNttNo();
        }
      } else {
        nttNo = Integer.parseInt(strNttNo);
      }
      // 게시물 번호가 있다면 해당 게시물 번호로 게시물을 조회한다.
      if (0 != nttNo) {
        // 게시물 정보
        BbsNtt bbsNtt = bbsNttService.selectBbsNtt(nttNo);
        model.addAttribute("bbsNtt", bbsNtt);
        // HTML 사용에 따라 내용을 TEXT로 변환
        if ("N".equals(bbsNtt.getHtmlUseAt())) {
          String nttCn = bbsNtt.getNttCn();
          bbsNtt.setNttCn(StringUtil.html2text(nttCn));
        }
        // 첨부파일 목록
        List<BbsAtchmnflVO> bbsAtchmnflList =
            bbsAtchmnflService.selectBbsAtchmnflList(request, nttNo, true);
        model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
        model.addAttribute("fileSize", getFileSize(bbsAtchmnflList));
      }
    }
    // 시민정보화교육 sub 하단 사이트 바로가기 서비스
    if (("iedu").equals(siteId)) {

      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(47, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(48, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 각 주민동 센터 하단 바로가기 서비스
    int linkZoneNo = 0;
    // 메인 하단 바로가기 서비스
    if (("ch").equals(siteId)) {
      linkZoneNo = 46;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(86, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj1").equals(siteId)) {
      linkZoneNo = 68;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(87, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj2").equals(siteId)) {
      linkZoneNo = 69;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(88, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp1").equals(siteId)) {
      linkZoneNo = 70;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(89, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp2").equals(siteId)) {
      linkZoneNo = 71;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(90, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp3").equals(siteId)) {
      linkZoneNo = 74;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(91, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ps").equals(siteId)) {
      linkZoneNo = 75;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(92, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms1").equals(siteId)) {
      linkZoneNo = 76;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(93, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms2").equals(siteId)) {
      linkZoneNo = 77;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(94, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("gb").equals(siteId)) {
      linkZoneNo = 78;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(95, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("cg").equals(siteId)) {
      linkZoneNo = 79;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(96, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ci").equals(siteId)) {
      linkZoneNo = 80;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(97, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("wr").equals(siteId)) {
      linkZoneNo = 81;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(98, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 열린시장실 하단 사이트 바로가기 연결
    if (("mayor").equals(siteId)) {
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(27, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(28, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 사회복지 하단 사이트 바로가기 연결
    if (("welfare").equals(siteId)) {

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(66, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(67, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 보건소 하단 사이트 바로가기 연결
    if (("health").equals(siteId)) {
      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(82, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(83, "", 30);
      model.addAttribute("quickList02", quickList02);

    }


    // 뉴스포털 tv하남은 덱스트에디터 사용 dexteditor
    if ("mmnws".equals(bbsVO.getSkinId()) || "hanamtv".equals(bbsVO.getSkinId())) {



      for (int i = 0; i < bbsNttList.size(); i++) {
        if (bbsNttList.get(i).getNttCn() != null) {
          bbsNttList.get(i).setNttCn(bbsNttList.get(i).getNttCn()
              .replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", ""));

        }

      }

    }
    // tv하남은 목록과 리스트가 같이 있음, 유튜브도 추가
    if ("hanamtv".equals(bbsVO.getSkinId()) || "youtube".equals(bbsVO.getSkinId())) {

      if (bbsNttList.size() != 0) {

        if (bbsNttVO.getNttNo() == 0) {
          bbsNttVO.setNttNo(bbsNttList.get(0).getNttNo());
        }


        // 게시판 정보
        model.addAttribute("bbsInfo", bbsInfo);
        // 게시물 정보
        BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());
        model.addAttribute("bbsNtt", bbsNtt);
        if (bbsNtt.getNttCn() != null) {
          bbsNtt.setNttCn(bbsNtt.getNttCn().replaceAll("<br>", "\n"));
          bbsNtt.setNttCn(bbsNtt.getNttCn().replaceAll("<br/>", "\n"));
          bbsNtt.setNttCn(bbsNtt.getNttCn().replaceAll("</p>", "\n"));
          bbsNtt.setNttCn(bbsNtt.getNttCn().replaceAll("<[^>]*>", " "));
        }


        // 첨부파일 목록
        List<BbsAtchmnflVO> bbsAtchmnflList =
            bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), true);


        model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
        model.addAttribute("fileSize", getFileSize(bbsAtchmnflList));

        // 조회수 업데이트
        bbsNttService.updateBbsNttRdcnt(request, bbsNttVO);
      }
    }



    return "bbs/" + bbsNo + "/list.jsp";

  }

  /**
   * 게시물 등록 화면으로 이동한다.
   *
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNo + "/regist.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"loginAuthorBinding", "bbsAuthorBinding", "templateBinding"},
      mode = BbsMode.ADD, type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/addBbsNttView.do")
  public String addBbsNttView(@PathVariable("siteId") String siteId,
      @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @RequestParam("bbsNo") int bbsNo,
      @RequestParam(value = "searchCtgry", required = false) String searchCtgry,
      @RequestParam(value = "searchCnd", required = false) String searchCnd,
      @RequestParam(value = "searchKrwd", required = false) String searchKrwd,
      HttpServletRequest request, ModelMap model) throws Exception {


    if (bbsNo == 65) {
      String startSearchDate;
      String endSearchDate;
      if (bbsNttVO.getStartSearchDate() != null && !bbsNttVO.getStartSearchDate().equals("")) {
        startSearchDate = bbsNttVO.getStartSearchDate().replaceAll("-", "");
        startSearchDate += "0000000";
        bbsNttVO.setStartSearchDate(startSearchDate);
      }
      if (bbsNttVO.getEndSearchDate() != null && !bbsNttVO.getEndSearchDate().equals("")) {
        endSearchDate = bbsNttVO.getEndSearchDate().replaceAll("-", "");
        endSearchDate += "235959";
        bbsNttVO.setEndSearchDate(endSearchDate);
      }
    }

    // 게시판 번호
    model.addAttribute("bbsNo", bbsNo);


    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNo);
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 신청기능 사용이면서 기간에 해당이 안되면 메시지 후 이전페이지로 넘김
    if (!bbsService.isRequestPeriod(bbsInfo)) {
      return cmmUseService.backMsg(model, bbsInfo.getReqstPdMssage());
    }

    // SSO 사용자
    LoginVO loginVO = LoginUtil.getLoginVO(request.getSession());
    bbsNttVO.setCtgryNm(searchCtgry);

    // 사용자 세션 처리
    // getDn이 null이 아니면 본인인증으로 통해 로그인한 일반인이므로 분기처리.
    bbsNttVO.setWriterNm(loginVO.getName());
    if (loginVO.getDn() != null) {
      bbsNttVO.setWriterDplctCode(loginVO.getDn());
    } else {
      bbsNttVO.setWriterDplctCode(loginVO.getId());
    }



    model.addAttribute("bbsNttVO", bbsNttVO);

    // JRNLST
    // 시민명예기자 로그인의 경우 등록안된 자신이 쓴글 목록 수정 가능
    if (siteId.equals("news")) {
      if (LoginUtil.isJrnlstAdmin(request.getSession()) == true) {
        BbsNttVO listVO = new BbsNttVO();
        listVO.setAditfield9("N");
        listVO.setBbsNo(bbsNo);
        listVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
        listVO.setFirstIndex(0);
        listVO.setLastIndex(10000000);
        List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, listVO);
        model.addAttribute("bbsNttList", bbsNttList);
      }
    }



    // 부서 목록
    /*
     * model.addAttribute("organizationFirstList",
     * organizationService.selectLwprtOrganizationListWithoutE(2));
     * model.addAttribute("organizationSecondList",
     * organizationService.selectLwprtOrganizationListWithoutE(3));
     */

    // 시민정보화교육 하단 페이지 이동
    if (("iedu").equals(siteId)) {

      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(47, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(48, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 각 주민동 센터 하단 바로가기 서비스
    int linkZoneNo = 0;
    // 메인 하단 바로가기 서비스
    if (("ch").equals(siteId)) {
      linkZoneNo = 46;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(86, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj1").equals(siteId)) {
      linkZoneNo = 68;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(87, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj2").equals(siteId)) {
      linkZoneNo = 69;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(88, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp1").equals(siteId)) {
      linkZoneNo = 70;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(89, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp2").equals(siteId)) {
      linkZoneNo = 71;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(90, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp3").equals(siteId)) {
      linkZoneNo = 74;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(91, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ps").equals(siteId)) {
      linkZoneNo = 75;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(92, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms1").equals(siteId)) {
      linkZoneNo = 76;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(93, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms2").equals(siteId)) {
      linkZoneNo = 77;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(94, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("gb").equals(siteId)) {
      linkZoneNo = 78;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(95, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("cg").equals(siteId)) {
      linkZoneNo = 79;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(96, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ci").equals(siteId)) {
      linkZoneNo = 80;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(97, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("wr").equals(siteId)) {
      linkZoneNo = 81;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(98, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 열린시장실 하단 사이트 바로가기 연결
    if (("mayor").equals(siteId)) {
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(27, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(28, "", 30);
      model.addAttribute("quickList02", quickList02);
    }
    // 사회복지 하단 사이트 바로가기 연결
    if (("welfare").equals(siteId)) {

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(66, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(67, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 보건소 하단 사이트 바로가기 연결
    if (("health").equals(siteId)) {
      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(82, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(83, "", 30);
      model.addAttribute("quickList02", quickList02);

    }

    /**
     * 2021.01.11 자동화 공격 방지 키 생성
     */
    String PREVENT_AU_KEY = UUID.randomUUID().toString();
    //System.out.println("PREVENT_AU_KEY : " + PREVENT_AU_KEY);
    SessionUtil.setSessionValue(request.getSession(), "PREVENT_AU_KEY", PREVENT_AU_KEY);

    return "bbs/" + bbsNo + "/regist.jsp";

  }

  /**
   * 게시물 등록을 처리한다.
   *
   * @param multiRequest
   * @param bbsNttVO
   * @param key
   * @param request
   * @param model
   * @return 등록화면 호출시 : "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp" 등록화면 처리시 :
   *         cmmUseService.redirectMsg(model, "등록을 완료하였습니다.", "/" + siteId +
   *         "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() +
   *         "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode())
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.ADD,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/addBbsNtt.do")
  public String addBbsNtt(final MultipartHttpServletRequest multiRequest,
      @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId,
      @RequestParam("key") int key,
      @RequestParam(value = "searchCnd", required = false) String searchCnd,
      @RequestParam(value = "searchKrwd", required = false) String searchKrwd,
      HttpServletRequest request, ModelMap model) throws Exception {

    //  보안취약점 자동화 공격 방어 키 검증.
    String PREVENT_AU_KEY =
        (String) SessionUtil.getSessionValue(request.getSession(), "PREVENT_AU_KEY");
    //System.out.println("PREVENT_AU_KEY : " + PREVENT_AU_KEY);
    if (StringUtil.isEmpty(PREVENT_AU_KEY)) {
      return cmmUseService.backMsg(model, "잘못된 접근 입니다.");
    }

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 신청기능 사용이면서 기간에 해당이 안되면 메시지 후 이전페이지로 넘김
    if (!bbsService.isRequestPeriod(bbsInfo)) {
      return cmmUseService.backMsg(model, bbsInfo.getReqstPdMssage());
    }

    // SSO 사용자
    LoginVO loginVO = LoginUtil.getLoginVO(request.getSession());

    // 사용자 세션 처리
    // getDn이 null이 아니면 본인인증으로 통해 로그인한 일반인이므로 분기처리.
    bbsNttVO.setWriterNm(loginVO.getName());
    if (loginVO.getDn() != null) {
      bbsNttVO.setWriterDplctCode(loginVO.getDn());
    } else {
      bbsNttVO.setWriterDplctCode(loginVO.getId());
    }


    // 게시판번호
    model.addAttribute("bbsNo", bbsNttVO.getBbsNo());

    // 부서 목록
    /*
     * model.addAttribute("organizationFirstList",
     * organizationService.selectLwprtOrganizationListWithoutE(2));
     * model.addAttribute("organizationSecondList",
     * organizationService.selectLwprtOrganizationListWithoutE(3));
     */

    // 입력데이터
    model.addAttribute("bbsNtt", bbsNttVO);

    // 유효성 검증
    String[] arrValidate = bbsNttService.validateBbsNtt(bbsNttVO);
    if ("1".equals(arrValidate[0])) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", arrValidate[1]);
      model.addAttribute("message", arrValidate[2]);
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp";
    }

    //  스마트시티 아이디어공모전 (BBS_NO 1724) 게시판이라면, 일시 디버깅을 위해 로그를 남긴다.
    if( bbsNttVO.getBbsNo() == 1724 ) {
      System.out.println(">>>\t스마트시티 아이디어공모전 (BBS_NO 1724) : " + bbsNttVO.getBbsNo());
    }

    // 등록 처리
    try {
      bbsNttService.insertBbsNtt(multiRequest, request, bbsNttVO);


    } catch (Exception e) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", "");
      model.addAttribute("message", e.getMessage());
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp";
    }

    // redirect를 이한 현재 key(menuNo)에 해당하는 메뉴네임 추출
    Menu menu = new Menu();
    if (key > 0) {
      menu = menuService.selectMenu(key);
    }

    String menuNm = "";

    if (menu != null) {
      menuNm = menu.getMenuNm();
    }
    String urlCtgryNm = "";

    if (bbsNttVO.getBbsNo() != 424) {
      if (bbsNttVO.getCtgryNm() == null) {
        urlCtgryNm = "";
      } else {
        urlCtgryNm = bbsNttVO.getCtgryNm();
      }
    }

    if (bbsNttVO.getIntegrDeptCode() == null) {
      bbsNttVO.setIntegrDeptCode("");
    }
    if (bbsNttVO.getSearchCnd() == null) {
      bbsNttVO.setSearchCnd("");
    }
    if (bbsNttVO.getSearchKrwd() == null) {
      bbsNttVO.setSearchKrwd("");
    }

    if (LoginUtil.isAdmin(request.getSession())
        || bbsAuthorService.authorSiteMngr(request.getSession(), siteId)
        || bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo())) {
      // 개인정보 처리
      String infoMbyId = "";
      String infoMbyNm = "";
      String atnddu = "ADD";
      String trtmntPurps = "STTUS08";
      String searchWrd = null;
      indvdlinfoLogService.insertIndvdlinfoLog(request, infoMbyId, infoMbyNm, atnddu, trtmntPurps,
          searchWrd);
    }


    /**
     * 2021.01.11 자동화 공격 방지.
     */
    SessionUtil.setSessionValue(request.getSession(), "PREVENT_AU_KEY", "");

    /**
     * 2021.01.13 시장에게 바란다 게시판 65, 글 작성시 로그아웃 되도록 함.
     */
    if (loginVO.getDn() != null && bbsNttVO.getBbsNo() == 65) {
      request.getSession().setAttribute("loginVO", null);
    }


    return cmmUseService.redirectMsg(model, "등록을 완료하였습니다.",
        "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo()
            + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode() + "&searchCtgry=" + urlCtgryNm
            + "&name=" + menuNm + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd="
            + bbsNttVO.getSearchKrwd());

  }

  /**
   * 게시물의 상세정보를 조회한다.
   *
   * @param bbsNttVO
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNttVO.getBbsNo() + "/view.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.VIEW,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/selectBbsNttView.do")
  public String selectBbsNttView(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
      @PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
      HttpServletRequest request, ModelMap model) throws Exception {



    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 내글 만 표시인 경우
    if ("LSSE03".equals(bbsInfo.getListShowSe())) {
      // 로그인이 되어있지 않다면
      if (StringUtil.isEmpty(bbsAuthorService.getUserDplctCode(request.getSession()))) {
        return cmmUseService.backMsg(model, "로그인 후 접근 가능 합니다.");
      }
      // 내 중복 코드
      bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
    }

    // 게시물 정보
    BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());
    if( null == bbsNtt ) {
      return "forward:/common/error.jsp";
    }
    model.addAttribute("bbsNtt", bbsNtt);

    // HTML 사용에 따라 내용을 TEXT로 변환
    if ("N".equals(bbsNtt.getHtmlUseAt())) {
      String nttCn = bbsNtt.getNttCn();
      bbsNtt.setNttCn(StringUtil.html2text(nttCn));
    }

    // 첨부파일 목록
    List<BbsAtchmnflVO> bbsAtchmnflList =
        bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), true);


    model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
    model.addAttribute("fileSize", getFileSize(bbsAtchmnflList));

    // 조회수 업데이트
    bbsNttService.updateBbsNttRdcnt(request, bbsNttVO);

    // 다중민원 게시판일 경우
    if (bbsInfo.getBbsNo() == 85) {

      // 게시물 페이징
      bbsNttVO.setPageUnit(bbsInfo.getListCo());
      bbsNttVO.setPageSize(bbsInfo.getPageCo());

      // 게시물 카운트
      int totCnt = bbsNttService.selectBbsNttMultiTotCnt(bbsNttVO);

      // 페이징 정보
      NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
      // 페이징 정보 등록
      model.addAttribute("paginationInfo", neoPaginationInfo);

      // 게시물 목록
      List<BbsNttVO> bbsNttMultiList = bbsNttService.selectBbsNttMultiList(bbsInfo, bbsNttVO);
      model.addAttribute("bbsNttMultiList", bbsNttMultiList);

    }

    // 답변인 경우
    if ("RTSY03".equals(bbsInfo.getReplySe())) {

      if ((("bbs").equals(siteId) || ("mayor").equals(siteId))
          && (bbsNo == 1 || bbsNo == 65 || bbsNo == 1504)) {
        List<BbsNttAnswer> bbsNttAnswerList =
            bbsNttAnswerService.selectBbsNttAnswerList(bbsNttVO.getNttNo());

        if (bbsNttAnswerList != null && bbsNttAnswerList.size() > 0) {
          BbsNttAnswer bbsNttAnswer = bbsNttAnswerList.get(0);
          for (int i = 0; i < bbsNttAnswerList.size(); i++) {
            if (bbsNttAnswerList.get(i).getMultiNttNo() != null) {
              BbsNtt bbsNttAnswerMulti = new BbsNtt();
              bbsNttAnswerMulti =
                  bbsNttService.selectBbsNtt(bbsNttAnswerList.get(i).getMultiNttNo());
              if (bbsNttAnswerMulti != null) {
                if (null != bbsNttAnswerList.get(i).getAnswerCn()) {
                  if (bbsNttAnswerList.get(i).getAnswerNo() >= 12703) {
                    bbsNttAnswerList.get(i)
                        .setAnswerCn((StringUtil.html2text(bbsNttAnswerList.get(i).getAnswerCn())));
                  } else {
                    bbsNttAnswerList.get(i).setAnswerCn(bbsNttAnswerList.get(i).getAnswerCn()
                        .replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", ""));
                  }
                  bbsNttAnswerMulti.setNttCn(StringUtil.html2text(bbsNttAnswerMulti.getNttCn()));
                }
                bbsNttAnswerList.get(i).setBbsNttAnswerMulti(bbsNttAnswerMulti);
              }
            }
          }
          model.addAttribute("bbsNttAnswerList", bbsNttAnswerList);

          if (null != bbsNttAnswer.getAnswerCn()) {
            if (bbsNttAnswer.getAnswerNo() >= 12703) {
              bbsNttAnswer.setAnswerCn((StringUtil.html2text(bbsNttAnswer.getAnswerCn())));
            } else {
              bbsNttAnswer.setAnswerCn(bbsNttAnswer.getAnswerCn()
                  .replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", ""));
              bbsNttAnswer.setAnswerCn(StringUtil.html2text(bbsNttAnswer.getAnswerCn()));
            }
          }
          model.addAttribute("bbsNttAnswer", bbsNttAnswer);
        }
      } else {

        BbsNttAnswer bbsNttAnswer = bbsNttAnswerService.selectBbsNttAnswer(bbsNttVO.getNttNo());
        if (null != bbsNttAnswer) {
          if (null != bbsNttAnswer.getAnswerCn()) {
            if (bbsNttAnswer.getAnswerNo() >= 12703) {
              bbsNttAnswer.setAnswerCn((StringUtil.html2text(bbsNttAnswer.getAnswerCn())));
            } else {
              bbsNttAnswer.setAnswerCn(bbsNttAnswer.getAnswerCn()
                  .replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", ""));
              bbsNttAnswer.setAnswerCn(StringUtil.html2text(bbsNttAnswer.getAnswerCn()));
            }
          }

          model.addAttribute("bbsNttAnswer", bbsNttAnswer);

          // 다중민원일 경우 해당 게시물 정보 가져오기
          if (bbsNttAnswer.getMultiNttNo() != null) {
            BbsNtt bbsNttAnswerMulti = new BbsNtt();
            bbsNttAnswerMulti = bbsNttService.selectBbsNtt(bbsNttAnswer.getMultiNttNo());
            if (bbsNttAnswerMulti != null) {
              if (null != bbsNttAnswer.getAnswerCn()) {
                bbsNttAnswer.setAnswerCn(bbsNttAnswer.getAnswerCn()
                    .replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", ""));
                bbsNttAnswerMulti.setNttCn(StringUtil.html2text(bbsNttAnswerMulti.getNttCn()));
              }
              model.addAttribute("bbsNttAnswerMulti", bbsNttAnswerMulti);
            }
          }
        }
      }
    }

    // 통합 사용 이지만 개별 사용페이지인 경우
    bbsNttVO.setIndvdlzShowAt(bbsNttService.isIndvdlzShowAt(bbsInfo, bbsNttVO));


    // 뉴스의 경우 이전 다음 보기는 AditField9가 Y 인것만 보임
    // 게시판 정보
    BbsVO bbsVO = bbsService.selectBbs(bbsNo);

    // 동영상 게시판이면
    if (!siteId.equals("staff")) {
      if ("movie".equals(bbsVO.getSkinId()) || "mmnws".equals(bbsVO.getSkinId())
          || "hanamtv".equals(bbsVO.getSkinId()) || "youtube".equals(bbsVO.getSkinId())) {
        bbsNttVO.setAditfield9("Y");
      }
    }

    // if(siteId.equals("news"))
    // {
    // bbsNttVO.setAditfield9("Y");
    // }

    //  스마트시티 아이디어공모전 (BBS_NO 1724) 게시판이라면,
    //  일반 시민은 이전/다음글 또한 본인의 게시글만 조회한다.
    if( bbsNo == 1724 ) {
      System.out.println(">>>\t스마트시티 아이디어공모전 (BBS_NO 1724) : " + bbsNo);
      // 로그인이 되어있지 않다면
      if (StringUtil.isEmpty(bbsAuthorService.getUserDplctCode(request.getSession()))) {
        return cmmUseService.backMsg(model, "로그인 후 접근 가능 합니다.");
      }
      // 최고관리자, 사이트관리자, 게시판 관리자가 아닌 경우는 본인의 글만 보여지도록 세팅.
      boolean isAdmin = LoginUtil.isAdmin(request.getSession()) == true;
      boolean isSiteMngr = bbsAuthorService.authorSiteMngr(request.getSession(), siteId) == true;
      boolean isBbsMngr = bbsAuthorService.authorBbsMngr(request.getSession(), bbsNo) == true;
      log.debug("isAdmin : {}, isSiteMngr : {}, isBbsMngr : {}", isAdmin, isSiteMngr, isBbsMngr);
      log.debug("userDplctCode : {}", bbsAuthorService.getUserDplctCode(request.getSession()));
      if ( !isAdmin && !isSiteMngr && !isBbsMngr ) {
        log.debug("\t\t>> isCitizenUser!! <<");
        bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
      }
    }

    // 이전/다음 보기
    int rnum = bbsNttService.selectBbsNttRnum(bbsNttVO);
    bbsNttVO.setRnum(rnum);
    BbsNtt bbsNttPrev = bbsNttService.selectBbsNttPrev(bbsNttVO);
    model.addAttribute("bbsNttPrev", bbsNttPrev);
    BbsNtt bbsNttNext = bbsNttService.selectBbsNttNext(bbsNttVO);
    model.addAttribute("bbsNttNext", bbsNttNext);

    // 댓글 사용 이라면
    if ("Y".equals(bbsInfo.getAnswerUseAt())) {
      List<BbsNttComment> bbsNttCommentList =
          bbsNttCommentService.selectBbsNttCommentList(bbsNttVO.getNttNo());
      model.addAttribute("bbsNttCommentList", bbsNttCommentList);
    }

    // 시민정보화교육 하단 페이지 이동
    if (("iedu").equals(siteId)) {

      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(47, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(48, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 각 주민동 센터 하단 바로가기 서비스
    int linkZoneNo = 0;
    // 메인 하단 바로가기 서비스
    if (("ch").equals(siteId)) {
      linkZoneNo = 46;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(86, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj1").equals(siteId)) {
      linkZoneNo = 68;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(87, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj2").equals(siteId)) {
      linkZoneNo = 69;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(88, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp1").equals(siteId)) {
      linkZoneNo = 70;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(89, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp2").equals(siteId)) {
      linkZoneNo = 71;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(90, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp3").equals(siteId)) {
      linkZoneNo = 74;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(91, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ps").equals(siteId)) {
      linkZoneNo = 75;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(92, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms1").equals(siteId)) {
      linkZoneNo = 76;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(93, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms2").equals(siteId)) {
      linkZoneNo = 77;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(94, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("gb").equals(siteId)) {
      linkZoneNo = 78;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(95, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("cg").equals(siteId)) {
      linkZoneNo = 79;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(96, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ci").equals(siteId)) {
      linkZoneNo = 80;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(97, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("wr").equals(siteId)) {
      linkZoneNo = 81;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(98, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 열린시장실 하단 사이트 바로가기 연결
    if (("mayor").equals(siteId)) {
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(27, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(28, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 사회복지 하단 사이트 바로가기 연결
    if (("welfare").equals(siteId)) {

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(66, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(67, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 보건소 하단 사이트 바로가기 연결
    if (("health").equals(siteId)) {
      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(82, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(83, "", 30);
      model.addAttribute("quickList02", quickList02);

    }

    if (LoginUtil.isAdmin(request.getSession())
        || bbsAuthorService.authorSiteMngr(request.getSession(), siteId)
        || bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo())) {
      // 개인정보 처리
      String infoMbyId = bbsNtt.getFrstRegisterId();
      String infoMbyNm = bbsNtt.getWriterNm();
      String atnddu = "READ";
      String trtmntPurps = "STTUS08";
      String searchWrd = bbsNtt.getNttNo() + "번 상세보기";
      indvdlinfoLogService.insertIndvdlinfoLog(request, infoMbyId, infoMbyNm, atnddu, trtmntPurps,
          searchWrd);
    }

    return "bbs/" + bbsNttVO.getBbsNo() + "/view.jsp";

  }

  /**
   * 게시물 수정 페이지로 이동한다.
   *
   * @param bbsNttVO
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNo + "/updt.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.UPDATE,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/updateBbsNttView.do")
  public String updateBbsNttView(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
      @PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
      HttpServletRequest request, ModelMap model) throws Exception {

    model.addAttribute("bbsNo", bbsNo);



    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 게시물 정보
    BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());
    // staff 페이지일 경우 dext5 사용하므로 html태그 변환



    model.addAttribute("bbsNtt", bbsNtt);



    // JRNLST
    // 시민명예기자 로그인의 경우 등록안된 자신이 쓴글 목록 수정 가능
    if (siteId.equals("news")) {
      if (LoginUtil.isJrnlstAdmin(request.getSession()) == true) {
        BbsNttVO listVO = new BbsNttVO();
        listVO.setAditfield9("N");
        listVO.setBbsNo(bbsNo);
        listVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));
        listVO.setFirstIndex(0);
        listVO.setLastIndex(10000000);
        List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, listVO);
        model.addAttribute("bbsNttList", bbsNttList);
      }
    }



    // 첨부파일 목록
    List<BbsAtchmnflVO> bbsAtchmnflList =
        bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), false);
    model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
    model.addAttribute("fileSize", getFileSize(bbsAtchmnflList));

    // 부서 목록
    /*
     * model.addAttribute("organizationFirstList",
     * organizationService.selectLwprtOrganizationListWithoutE(2));
     * model.addAttribute("organizationSecondList",
     * organizationService.selectLwprtOrganizationListWithoutE(3));
     */

    // 시민정보화교육 하단 페이지 이동
    if (("iedu").equals(siteId)) {

      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(47, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(48, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 각 주민동 센터 하단 바로가기 서비스
    int linkZoneNo = 0;
    // 메인 하단 바로가기 서비스
    if (("ch").equals(siteId)) {
      linkZoneNo = 46;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(86, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj1").equals(siteId)) {
      linkZoneNo = 68;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(87, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("sj2").equals(siteId)) {
      linkZoneNo = 69;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(88, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp1").equals(siteId)) {
      linkZoneNo = 70;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(89, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp2").equals(siteId)) {
      linkZoneNo = 71;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(90, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("dp3").equals(siteId)) {
      linkZoneNo = 74;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(91, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ps").equals(siteId)) {
      linkZoneNo = 75;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(92, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms1").equals(siteId)) {
      linkZoneNo = 76;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(93, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ms2").equals(siteId)) {
      linkZoneNo = 77;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(94, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("gb").equals(siteId)) {
      linkZoneNo = 78;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(95, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("cg").equals(siteId)) {
      linkZoneNo = 79;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(96, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("ci").equals(siteId)) {
      linkZoneNo = 80;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(97, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }
    if (("wr").equals(siteId)) {
      linkZoneNo = 81;
      List<LinkZoneItemVO> quickList01 =
          linkZoneItemService.selectLinkZoneItemList(linkZoneNo, " ", 30);
      model.addAttribute("quickList01", quickList01);

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(98, " ", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 열린시장실 하단 사이트 바로가기 연결
    if (("mayor").equals(siteId)) {
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(27, "", 30);
      model.addAttribute("quickList01", quickList01);

      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(28, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 사회복지 하단 사이트 바로가기 연결
    if (("welfare").equals(siteId)) {

      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(66, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(67, "", 30);
      model.addAttribute("quickList02", quickList02);
    }

    // 보건소 하단 사이트 바로가기 연결
    if (("health").equals(siteId)) {
      // 동주민센터 링크
      List<LinkZoneItemVO> quickList01 = linkZoneItemService.selectLinkZoneItemList(82, "", 30);
      model.addAttribute("quickList01", quickList01);

      // 패밀리사이트 링크
      List<LinkZoneItemVO> quickList02 = linkZoneItemService.selectLinkZoneItemList(83, "", 30);
      model.addAttribute("quickList02", quickList02);

    }

    return "bbs/" + bbsNo + "/updt.jsp";

  }

  /**
   * 게시물 수정을 처리한다.
   *
   * @param multiRequest
   * @param bbsNttVO
   * @param key
   * @param request
   * @param model
   * @return 수정화면 호출시 : "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp" 수정화면 처리시 :
   *         cmmUseService.redirectMsg(model, "수정을 완료하였습니다.", "/" + siteId +
   *         "/selectBbsNttView.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&nttNo=" +
   *         bbsNttVO.getNttNo() + "&searchCtgry=" + bbsNttVO.getSearchCtgry() + "&searchCnd=" +
   *         bbsNttVO.getSearchCnd() + "&searchKrwd=" + bbsNttVO.getSearchKrwd() + "&pageIndex=" +
   *         bbsNttVO.getPageIndex() + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode())
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.UPDATE,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/updateBbsNtt.do")
  public String updateBbsNtt(final MultipartHttpServletRequest multiRequest,
      @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId,
      @RequestParam("key") int key, HttpServletRequest request, ModelMap model) throws Exception {

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 부서 목록
    /*
     * model.addAttribute("organizationFirstList",
     * organizationService.selectLwprtOrganizationListWithoutE(2));
     * model.addAttribute("organizationSecondList",
     * organizationService.selectLwprtOrganizationListWithoutE(3));
     */
    // 입력데이터
    model.addAttribute("bbsNtt", bbsNttVO);
    // 첨부파일 목록
    List<BbsAtchmnflVO> bbsAtchmnflList =
        bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), false);
    model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);

    // 유효성 검증
    String[] arrValidate = bbsNttService.validateBbsNtt(bbsNttVO);
    if ("1".equals(arrValidate[0])) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", arrValidate[1]);
      model.addAttribute("message", arrValidate[2]);
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/updt.jsp";
    }

    // 수정 처리
    try {
      bbsNttService.updateBbsNtt(multiRequest, request, bbsNttVO);
    } catch (Exception e) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", "");
      model.addAttribute("message", e.getMessage());
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/updt.jsp";
    }

    if (LoginUtil.isAdmin(request.getSession())
        || bbsAuthorService.authorSiteMngr(request.getSession(), siteId)
        || bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo())) {
      // 게시물 정보
      BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());

      // 개인정보 처리
      String infoMbyId = bbsNtt.getFrstRegisterId();
      String infoMbyNm = bbsNtt.getWriterNm();
      String atnddu = "UPDATE";
      String trtmntPurps = "STTUS08";
      String searchWrd = bbsNtt.getNttNo() + "번 수정";
      indvdlinfoLogService.insertIndvdlinfoLog(request, infoMbyId, infoMbyNm, atnddu, trtmntPurps,
          searchWrd);
    }

    return cmmUseService.redirectMsg(model, "수정을 완료하였습니다.",
        "/" + siteId + "/selectBbsNttView.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo()
            + "&nttNo=" + bbsNttVO.getNttNo() + "&searchCtgry=" + bbsNttVO.getSearchCtgry()
            + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd=" + bbsNttVO.getSearchKrwd()
            + "&pageIndex=" + bbsNttVO.getPageIndex() + "&integrDeptCode="
            + bbsNttVO.getIntegrDeptCode());

  }

  /**
   * 게시물을 삭제한다.
   *
   * @param bbsNttVO
   * @param key
   * @param request
   * @param model
   * @return cmmUseService.redirectMsg(model, "삭제를 완료하였습니다.", "/" + siteId +
   *         "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() + "&searchCtgry=" +
   *         bbsNttVO.getSearchCtgry() + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd=" +
   *         bbsNttVO.getSearchKrwd() + "&pageIndex=" + bbsNttVO.getPageIndex())
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.DELETE,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/deleteBbsNtt.do")
  public String deleteBbsNtt(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
      @PathVariable("siteId") String siteId, @RequestParam("key") int key,
      HttpServletRequest request, ModelMap model) throws Exception {

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    //  답변 글의 존재 유무 확인.
    if (0 != bbsNttService.selectBbsNttLwprtCnt(bbsNttVO)) {
      return cmmUseService.backMsg(model, "답변글이 있어 삭제할 수 없습니다.");
    }

    if (LoginUtil.isAdmin(request.getSession())
        || bbsAuthorService.authorSiteMngr(request.getSession(), siteId)
        || bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo())) {
      // 게시물 정보
      BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());

      // 개인정보 처리
      String infoMbyId = bbsNtt.getFrstRegisterId();
      String infoMbyNm = bbsNtt.getWriterNm();
      String atnddu = "DELETE";
      String trtmntPurps = "STTUS08";
      String searchWrd = bbsNtt.getNttNo() + "번 삭제";
      indvdlinfoLogService.insertIndvdlinfoLog(request, infoMbyId, infoMbyNm, atnddu, trtmntPurps,
          searchWrd);
    }

    // 게시물 삭제처리
    bbsNttService.updateBbsNttDeleteAt(bbsNttVO.getNttNo());


    return cmmUseService.redirectMsg(model, "삭제를 완료하였습니다.",
        "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo()
            + "&searchCtgry=" + bbsNttVO.getSearchCtgry() + "&searchCnd=" + bbsNttVO.getSearchCnd()
            + "&searchKrwd=" + bbsNttVO.getSearchKrwd() + "&pageIndex=" + bbsNttVO.getPageIndex()
            + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode());

  }

  /**
   * 게시물 답변(계층형) 화면으로 이동한다.
   *
   * @param bbsNo
   * @param nttNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNo + "/reply.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.REPLY,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/addBbsNttReplyView.do")
  public String addBbsNttReplyView(@PathVariable("siteId") String siteId,
      @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @RequestParam("bbsNo") int bbsNo,
      @RequestParam("nttNo") int nttNo, HttpServletRequest request, ModelMap model)
      throws Exception {

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    model.addAttribute("bbsNo", bbsNo);
    model.addAttribute("nttNo", nttNo);

    // SSO 사용자
    LoginVO loginVO = LoginUtil.getLoginVO(request.getSession());

    // 사용자 세션 처리
    // getDn이 null이 아니면 본인인증으로 통해 로그인한 일반인이므로 분기처리.
    bbsNttVO.setWriterNm(loginVO.getName());
    if (loginVO.getDn() != null) {
      bbsNttVO.setWriterDplctCode(loginVO.getDn());
    } else {
      bbsNttVO.setWriterDplctCode(loginVO.getId());
    }

    model.addAttribute("bbsNttVO", bbsNttVO);

    // 부서 목록
    /*
     * model.addAttribute("organizationFirstList",
     * organizationService.selectLwprtOrganizationListWithoutE(2));
     * model.addAttribute("organizationSecondList",
     * organizationService.selectLwprtOrganizationListWithoutE(3));
     */

    return "bbs/" + bbsNo + "/reply.jsp";

  }

  /**
   * 게시물 답변(계층형)을 처리한다.
   *
   * @param multiRequest
   * @param bbsNttVO
   * @param key
   * @param request
   * @param model
   * @return 답변화면 호출시 : "bbs/" + bbsNttVO.getBbsNo() + "/reply.jsp" 답변화면 처리시 :
   *         cmmUseService.redirectMsg(model, "등록을 완료하였습니다.", "/" + siteId +
   *         "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo())
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.REPLY,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/addBbsNttReply.do")
  public String addBbsNttReply(final MultipartHttpServletRequest multiRequest,
      @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId,
      @RequestParam("key") int key, HttpServletRequest request, ModelMap model) throws Exception {

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // SSO 사용자
    LoginVO loginVO = LoginUtil.getLoginVO(request.getSession());

    // 사용자 세션 처리
    // getDn이 null이 아니면 본인인증으로 통해 로그인한 일반인이므로 분기처리.
    bbsNttVO.setWriterNm(loginVO.getName());
    if (loginVO.getDn() != null) {
      bbsNttVO.setWriterDplctCode(loginVO.getDn());
    } else {
      bbsNttVO.setWriterDplctCode(loginVO.getId());
    }

    model.addAttribute("bbsNo", bbsNttVO.getBbsNo());

    // 부서 목록
    /*
     * model.addAttribute("organizationFirstList",
     * organizationService.selectLwprtOrganizationListWithoutE(2));
     * model.addAttribute("organizationSecondList",
     * organizationService.selectLwprtOrganizationListWithoutE(3));
     */
    // 입력데이터
    model.addAttribute("bbsNtt", bbsNttVO);

    // 유효성 검증
    String[] arrValidate = bbsNttService.validateBbsNtt(bbsNttVO);
    if ("1".equals(arrValidate[0])) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", arrValidate[1]);
      model.addAttribute("message", arrValidate[2]);
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/reply.jsp";
    }

    // 답변 처리
    try {
      bbsNttService.insertBbsNttReply(multiRequest, request, bbsNttVO);
    } catch (Exception e) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", "");
      model.addAttribute("message", e.getMessage());
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp";
    }

    return cmmUseService.redirectMsg(model, "등록을 완료하였습니다.",
        "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo()
            + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode());

  }

  /**
   * 내 게시물의 목록을 조회한다.
   *
   * @param bbsNttVO
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNo + "/myList.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.MYLIST,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/selectBbsNttMyList.do")
  public String selectBbsNttMyList(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
      @PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
      HttpServletRequest request, ModelMap model) throws Exception {

    // 게시판 번호
    model.addAttribute("bbsNo", bbsNo);

    // 게시판 상세 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 내 중복 코드
    bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));

    // 게시물 페이징
    bbsNttVO.setPageUnit(bbsInfo.getListCo());
    bbsNttVO.setPageSize(bbsInfo.getPageCo());

    // 게시물 카운트
    int totCnt = bbsNttService.selectBbsNttTotCnt(bbsNttVO);
    // 페이징 정보
    NeoPaginationInfo neoPaginationInfo = bbsNttVO.getNeoPaginationInfo(totCnt);
    // 페이징 정보 등록
    model.addAttribute("paginationInfo", neoPaginationInfo);

    // 게시물 목록
    List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttList(bbsInfo, bbsNttVO);
    model.addAttribute("bbsNttList", bbsNttList);

    // 게시판 정보
    BbsVO bbsVO = bbsService.selectBbs(bbsNo);

    // 동영상 게시판이면
    if ("movie".equals(bbsVO.getSkinId())) {
      // 게시물 번호
      int nttNo = 0;
      String strNttNo = StringUtil.nvl(request.getParameter("nttNo"));
      // 게시물 번호가 없다면 첫번째 게시물을 조회한다.
      if (StringUtil.isEmpty(strNttNo)) {
        if (0 != bbsNttList.size()) {
          nttNo = bbsNttList.get(0).getNttNo();
        }
      } else {
        nttNo = Integer.parseInt(strNttNo);
      }
      // 게시물 번호가 있다면 해당 게시물 번호로 게시물을 조회한다.
      if (0 != nttNo) {
        // 게시물 정보
        BbsNtt bbsNtt = bbsNttService.selectBbsNtt(nttNo);
        model.addAttribute("bbsNtt", bbsNtt);
        // HTML 사용에 따라 내용을 TEXT로 변환
        if ("N".equals(bbsNtt.getHtmlUseAt())) {
          String nttCn = bbsNtt.getNttCn();
          bbsNtt.setNttCn(StringUtil.html2text(nttCn));
        }
        // 첨부파일 목록
        List<BbsAtchmnflVO> bbsAtchmnflList =
            bbsAtchmnflService.selectBbsAtchmnflList(request, nttNo, true);
        model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
        model.addAttribute("fileSize", getFileSize(bbsAtchmnflList));
      }
    }

    return "bbs/" + bbsNo + "/myList.jsp";

  }

  /**
   * 게시물의 내글 상세정보를 조회한다.
   *
   * @param bbsNttVO
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNttVO.getBbsNo() + "/myView.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"bbsAuthorBinding", "templateBinding"}, mode = BbsMode.MYVIEW,
      type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/selectBbsNttMyView.do")
  public String selectBbsNttMyView(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
      @PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
      HttpServletRequest request, ModelMap model) throws Exception {

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 게시물 정보
    BbsNtt bbsNtt = bbsNttService.selectBbsNtt(bbsNttVO.getNttNo());
    model.addAttribute("bbsNtt", bbsNtt);

    // 내 중복 코드
    bbsNttVO.setWriterDplctCode(bbsAuthorService.getUserDplctCode(request.getSession()));

    // HTML 사용에 따라 내용을 TEXT로 변환
    if ("N".equals(bbsNtt.getHtmlUseAt())) {
      String nttCn = bbsNtt.getNttCn();
      bbsNtt.setNttCn(StringUtil.html2text(nttCn));
    }

    // 첨부파일 목록
    List<BbsAtchmnflVO> bbsAtchmnflList =
        bbsAtchmnflService.selectBbsAtchmnflList(request, bbsNttVO.getNttNo(), true);
    model.addAttribute("bbsAtchmnflList", bbsAtchmnflList);
    model.addAttribute("fileSize", getFileSize(bbsAtchmnflList));

    // 조회수 업데이트
    bbsNttService.updateBbsNttRdcnt(request, bbsNttVO);

    // 답변인 경우
    if ("RTSY03".equals(bbsInfo.getReplySe())) {
      BbsNttAnswer bbsNttAnswer = bbsNttAnswerService.selectBbsNttAnswer(bbsNttVO.getNttNo());
      if (null != bbsNttAnswer) {
        if (null != bbsNttAnswer.getAnswerCn()) {
          bbsNttAnswer.setAnswerCn(bbsNttAnswer.getAnswerCn()
              .replaceAll("<(/)?([a-zA-Z]*)(\\s[a-zA-Z]*=[^>]*)?(\\s)*(/)?>", ""));
          bbsNttAnswer.setAnswerCn(StringUtil.html2text(bbsNttAnswer.getAnswerCn()));
        }

        model.addAttribute("bbsNttAnswer", bbsNttAnswer);
      }
    }

    // 이전/다음 보기
    int rnum = bbsNttService.selectBbsNttRnum(bbsNttVO);
    bbsNttVO.setRnum(rnum);
    BbsNtt bbsNttPrev = bbsNttService.selectBbsNttPrev(bbsNttVO);
    model.addAttribute("bbsNttPrev", bbsNttPrev);
    BbsNtt bbsNttNext = bbsNttService.selectBbsNttNext(bbsNttVO);
    model.addAttribute("bbsNttNext", bbsNttNext);

    // 댓글 사용 이라면
    if ("Y".equals(bbsInfo.getAnswerUseAt())) {
      List<BbsNttComment> bbsNttCommentList =
          bbsNttCommentService.selectBbsNttCommentList(bbsNttVO.getNttNo());
      model.addAttribute("bbsNttCommentList", bbsNttCommentList);
    }

    return "bbs/" + bbsNttVO.getBbsNo() + "/myView.jsp";

  }

  /**
   * 기간에 대한 게시물의 정보를 조회한다.
   *
   * @param bbsNttVO
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNttVO.getBbsNo() + "/mainSubview.jsp"
   * @throws Exception
   */
  @Interceptor("templateMainBinding")
  @RequestMapping(value = "/{siteId}/selectBbsNttMainView.do")
  public String selectBbsNttMainView(@ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO,
      @PathVariable("siteId") String siteId, @RequestParam("bbsNo") int bbsNo,
      @RequestParam("dayNum") String dayNum, HttpServletRequest request, ModelMap model)
      throws Exception {

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    model.addAttribute("bbsInfo", bbsInfo);
    // dayNum

    bbsNttVO.setBgnde(dayNum + "    ");
    // 게시물 목록
    List<BbsNttVO> bbsNttList = bbsNttService.selectBbsNttMainList(bbsInfo, bbsNttVO);
    model.addAttribute("bbsNttList", bbsNttList);

    model.addAttribute("dayNum", dayNum + "    ");
    // dayNum

    return "NeoCMS/cop/bbs/mainView";

  }

  // 첨부파일의 용량을 구해주는 function
  @SuppressWarnings({"rawtypes", "unchecked"})
  List getFileSize(List<BbsAtchmnflVO> bbsAtchmnflList) {
    String filePath;
    long L = 0;
    List fileSize = new ArrayList();
    if (bbsAtchmnflList.size() > 0) {
      for (int i = 0; i < bbsAtchmnflList.size(); i++) {
        filePath =
            bbsAtchmnflList.get(i).getStorePath() + "/" + bbsAtchmnflList.get(i).getStoreFileNm();
        File oFile = new File("/data/was2/hanam/WEB" + filePath);

        if (oFile.exists()) {
          L = oFile.length();
        }
        //  20210413 불필요한 로그 제거
        //  else System.err.println("not file...");
        fileSize.add(i, Math.round(L / 1024) + i);
      }
    }
    return fileSize;
  }
  
  
  
  
  /**
   * [사용자] 셔명운동 등록 화면으로 이동한다.
   *
   * @param bbsNo
   * @param request
   * @param model
   * @return "bbs/" + bbsNo + "/regist.jsp"
   * @throws Exception
   */
  @Interceptor(value = {"templateBinding"}, mode = BbsMode.ADD, type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/addSignmentView.do")
  public String addSignmentView(@PathVariable("siteId") String siteId,
      @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @RequestParam("bbsNo") int bbsNo,
      @RequestParam(value = "searchCtgry", required = false) String searchCtgry,
      @RequestParam(value = "searchCnd", required = false) String searchCnd,
      @RequestParam(value = "searchKrwd", required = false) String searchKrwd,
      HttpServletRequest request, ModelMap model) throws Exception {

    // 게시판 번호
    model.addAttribute("bbsNo", bbsNo);
    


    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNo);
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }


    // SSO 사용자
    LoginVO loginVO = LoginUtil.getLoginVO(request.getSession());
    bbsNttVO.setCtgryNm(searchCtgry);

    // 사용자 세션 처리
    // getDn이 null이 아니면 본인인증으로 통해 로그인한 일반인이므로 분기처리.
    bbsNttVO.setWriterNm(loginVO.getName());
    if (loginVO.getDn() != null) {
      bbsNttVO.setWriterDplctCode(loginVO.getDn());
    } else {
      bbsNttVO.setWriterDplctCode(loginVO.getId());
    }



    model.addAttribute("bbsNttVO", bbsNttVO);


    /**
     * 2021.01.11 자동화 공격 방지 키 생성
     */
    String PREVENT_AU_KEY = UUID.randomUUID().toString();
    //System.out.println("PREVENT_AU_KEY : " + PREVENT_AU_KEY);
    SessionUtil.setSessionValue(request.getSession(), "PREVENT_AU_KEY", PREVENT_AU_KEY);

    return "bbs/" + bbsNo + "/regist.jsp";

  }

  /**
   * 게시물 등록을 처리한다.
   *
   * @param multiRequest
   * @param bbsNttVO
   * @param key
   * @param request
   * @param model
   * @return 등록화면 호출시 : "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp" 등록화면 처리시 :
   *         cmmUseService.redirectMsg(model, "등록을 완료하였습니다.", "/" + siteId +
   *         "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo() +
   *         "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode())
   * @throws Exception
   */
  @Interceptor(value = {"templateBinding"}, mode = BbsMode.ADD, type = AccesType.BBS)
  @RequestMapping(value = "/{siteId}/addSignment.do")
  public String addSignment(final MultipartHttpServletRequest multiRequest,
      @ModelAttribute("bbsNttVO") BbsNttVO bbsNttVO, @PathVariable("siteId") String siteId,
      @RequestParam("key") int key,
      @RequestParam(value = "searchCnd", required = false) String searchCnd,
      @RequestParam(value = "searchKrwd", required = false) String searchKrwd,
      HttpServletRequest request, ModelMap model) throws Exception {

    //  보안취약점 자동화 공격 방어 키 검증.
    String PREVENT_AU_KEY =
        (String) SessionUtil.getSessionValue(request.getSession(), "PREVENT_AU_KEY");
    //System.out.println("PREVENT_AU_KEY : " + PREVENT_AU_KEY);
    if (StringUtil.isEmpty(PREVENT_AU_KEY)) {
      return cmmUseService.backMsg(model, "잘못된 접근 입니다.");
    }

    // 게시판 정보
    BbsInfo bbsInfo = bbsInfoService.selectBbsInfo(bbsNttVO.getBbsNo());
    model.addAttribute("bbsInfo", bbsInfo);

    // 통합사용이면
    if ("Y".equals(bbsInfo.getIntegrUseAt())) {
      // integrDeptCode가 없다면 잘못된 접근
      if (StringUtil.isEmpty(bbsNttVO.getIntegrDeptCode())) {
        return cmmUseService.backMsg(model, "잘못된 접근 입니다.\n통합게시판은 부서코드가 존재해야 합니다.");
      }
    }

    // 신청기능 사용이면서 기간에 해당이 안되면 메시지 후 이전페이지로 넘김
    if (!bbsService.isRequestPeriod(bbsInfo)) {
      return cmmUseService.backMsg(model, bbsInfo.getReqstPdMssage());
    }

    // SSO 사용자
    LoginVO loginVO = LoginUtil.getLoginVO(request.getSession());

    // 사용자 세션 처리
    // getDn이 null이 아니면 본인인증으로 통해 로그인한 일반인이므로 분기처리.
    bbsNttVO.setWriterNm(loginVO.getName());
    if (loginVO.getDn() != null) {
      bbsNttVO.setWriterDplctCode(loginVO.getDn());
    } else {
      bbsNttVO.setWriterDplctCode(loginVO.getId());
    }


    // 게시판번호
    model.addAttribute("bbsNo", bbsNttVO.getBbsNo());

    // 부서 목록
    /*
     * model.addAttribute("organizationFirstList",
     * organizationService.selectLwprtOrganizationListWithoutE(2));
     * model.addAttribute("organizationSecondList",
     * organizationService.selectLwprtOrganizationListWithoutE(3));
     */

    // 입력데이터
    model.addAttribute("bbsNtt", bbsNttVO);

    // 유효성 검증
    String[] arrValidate = bbsNttService.validateBbsNtt(bbsNttVO);
    if ("1".equals(arrValidate[0])) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", arrValidate[1]);
      model.addAttribute("message", arrValidate[2]);
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp";
    }

    //  스마트시티 아이디어공모전 (BBS_NO 1724) 게시판이라면, 일시 디버깅을 위해 로그를 남긴다.
    if( bbsNttVO.getBbsNo() == 1724 ) {
      System.out.println(">>>\t스마트시티 아이디어공모전 (BBS_NO 1724) : " + bbsNttVO.getBbsNo());
    }

    // 등록 처리
    try {
      bbsNttService.insertBbsNtt(multiRequest, request, bbsNttVO);


    } catch (Exception e) {
      // validate
      model.addAttribute("isValidate", true);
      model.addAttribute("fieldNm", "");
      model.addAttribute("message", e.getMessage());
      // 입력페이지 이동
      return "bbs/" + bbsNttVO.getBbsNo() + "/regist.jsp";
    }

    // redirect를 이한 현재 key(menuNo)에 해당하는 메뉴네임 추출
    Menu menu = new Menu();
    if (key > 0) {
      menu = menuService.selectMenu(key);
    }

    String menuNm = "";

    if (menu != null) {
      menuNm = menu.getMenuNm();
    }
    String urlCtgryNm = "";

    if (bbsNttVO.getBbsNo() != 424) {
      if (bbsNttVO.getCtgryNm() == null) {
        urlCtgryNm = "";
      } else {
        urlCtgryNm = bbsNttVO.getCtgryNm();
      }
    }

    if (bbsNttVO.getIntegrDeptCode() == null) {
      bbsNttVO.setIntegrDeptCode("");
    }
    if (bbsNttVO.getSearchCnd() == null) {
      bbsNttVO.setSearchCnd("");
    }
    if (bbsNttVO.getSearchKrwd() == null) {
      bbsNttVO.setSearchKrwd("");
    }

    if (LoginUtil.isAdmin(request.getSession())
        || bbsAuthorService.authorSiteMngr(request.getSession(), siteId)
        || bbsAuthorService.authorBbsMngr(request.getSession(), bbsNttVO.getBbsNo())) {
      // 개인정보 처리
      String infoMbyId = "";
      String infoMbyNm = "";
      String atnddu = "ADD";
      String trtmntPurps = "STTUS08";
      String searchWrd = null;
      indvdlinfoLogService.insertIndvdlinfoLog(request, infoMbyId, infoMbyNm, atnddu, trtmntPurps,
          searchWrd);
    }


    /**
     * 2021.01.11 자동화 공격 방지.
     */
    SessionUtil.setSessionValue(request.getSession(), "PREVENT_AU_KEY", "");

    /**
     * 2021.01.13 시장에게 바란다 게시판 65, 글 작성시 로그아웃 되도록 함.
     */
    if (loginVO.getDn() != null && bbsNttVO.getBbsNo() == 65) {
      request.getSession().setAttribute("loginVO", null);
    }


    return cmmUseService.redirectMsg(model, "등록을 완료하였습니다.",
        "/" + siteId + "/selectBbsNttList.do?key=" + key + "&bbsNo=" + bbsNttVO.getBbsNo()
            + "&integrDeptCode=" + bbsNttVO.getIntegrDeptCode() + "&searchCtgry=" + urlCtgryNm
            + "&name=" + menuNm + "&searchCnd=" + bbsNttVO.getSearchCnd() + "&searchKrwd="
            + bbsNttVO.getSearchKrwd());

  }
}
